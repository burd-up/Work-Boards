{"version":3,"sources":["store/users-reducer.ts","store/projects-reducer.ts","store/settings-reducer.ts","views/Header/DrawerMenu/DrawerMenu.tsx","views/Header/UserSelectionMenu/UserSelectionMenu.tsx","views/Header/ColorSelectionMenu/ColorSelectionMenu.tsx","views/Header/Header.tsx","utils/selectors/currentProject-selector.ts","views/Header/HeaderContainer.tsx","views/AddProjectForm/ListOfUsers/ListOfUsers.tsx","views/ListOfProjects/ChangeProject/SelectionOfAvailableUsers.tsx","views/ListOfProjects/ChangeProject/AddWorkers.tsx","views/ListOfProjects/ProjectInList.tsx","views/ListOfProjects/ListOfProjects.tsx","views/ListOfProjects/ListOfProjectsContainer.tsx","views/Task/AuxiliaryComponents/Subcomponents/Priority.tsx","views/Task/AuxiliaryComponents/Subcomponents/Description.tsx","views/Task/AuxiliaryComponents/Subcomponents/WorkersAccordion.tsx","views/Task/AuxiliaryComponents/Subcomponents/DescriptionAccordion.tsx","views/Task/AuxiliaryComponents/Subcomponents/TitleForDialogOfTask.tsx","views/Task/AuxiliaryComponents/AllInformationTask.tsx","views/Task/AuxiliaryComponents/TaskContent.tsx","views/Task/AuxiliaryComponents/Subcomponents/Message.tsx","views/Task/AuxiliaryComponents/Subcomponents/AllMessage.tsx","views/Task/AuxiliaryComponents/CommunicationWindow.tsx","views/Task/RunningTask.tsx","views/Task/ReviewTask.tsx","views/Task/CurrentTask.tsx","views/ListOfTasks/AuxiliaryComponents/AvailableTasks.tsx","views/ListOfTasks/AuxiliaryComponents/CurrentTasks.tsx","views/Task/CompletedTask.tsx","views/ListOfTasks/AuxiliaryComponents/ReadyTasks.tsx","views/ListOfTasks/AuxiliaryComponents/CreatedTasks.tsx","views/ListOfTasks/ListOfTasks.tsx","views/ListOfTasks/ListOfTasksContainer.tsx","views/AddTaskForm/AddTaskForm.tsx","views/AddTaskForm/AddTaskFormContainer.tsx","views/AddProjectForm/SelectionOfMultipleUsers.tsx","views/AddProjectForm/AddProjectForm.tsx","views/AddProjectForm/AddProjectFormContainer.tsx","views/WorkBoard/Board/Board.tsx","views/WorkBoard/WorkBoard.tsx","utils/selectors/task-selectors.ts","views/WorkBoard/WorkBoardContainer.tsx","utils/selectors/rowAccessLevels.ts","views/AddUserForm/ListOfAccesses/ListOfAccesses.tsx","views/AddUserForm/ChoiceOfAccessLevels.tsx","views/AddUserForm/AddUserForm.tsx","views/AddUserForm/AddUserFormContainer.tsx","App.tsx","reportWebVitals.js","store/store.ts","index.tsx"],"names":["userSlice","createSlice","name","initialState","currentUser","id","surname","position","accesses","projects","users","reducers","setCurrentUser","state","action","payload","addUser","newUser","length","push","addProjectInArrayOfUsers","forEach","el","find","user","projectId","actions","projectSlice","currentProjectId","developersId","tasks","description","priority","status","communication","developer","forReview","tester","creator","takeTaskForDevelopment","indexProject","findIndex","indexTask","taskId","takeTaskForReview","giveTaskForReview","approveTask","sendMessage","lengthMessages","message","author","whoRead","takeTaskForRevision","setCurrentProjectId","currentProject","addNewTaskToProject","newTask","addNewProject","newProject","addNewUserToProject","newDevelopersId","map","oldDevelopersId","filter","readAllMessageInTask","includes","userId","currentColor","primary","main","secondary","colors","setCurrentColor","useStyles","makeStyles","list","width","color","textDecoration","fullList","height","overflow","textOverflow","List","props","classes","to","url","className","ListItem","button","ListItemIcon","icon","ListItemText","text","badgeContent","Badge","variant","DrawerMenu","Drawer","open","isOpenLeftMenu","Box","display","p","alignSelf","flexGrow","Typography","justifyContent","IconButton","edge","onClick","setIsOpenLeftMenu","messagesForAllProjects","messagesForCurrentProject","theme","palette","contrastText","menuItem","backgroundColor","indigo","maxHeight","UserSelectionMenu","listOfUsers","MenuItem","handleClose","useState","anchorEl","setAnchorEl","Button","event","currentTarget","endIcon","keepMounted","Boolean","onClose","uniqueUseStyles","avatar","box","overflowY","ColorSelectionMenu","setColor","listOfColor","Avatar","menuButton","marginRight","spacing","title","Header","AppBar","Toolbar","align","alignItems","currentProjectSelector","tasksInProjectForUserSelector","currentUserId","userAccessibleTasksSelector","accessibleDeveloperTasks","accessibleTesterTasks","currentProjectNameSelector","unreadMessagesForProjectSelector","project","unreadMessagesLength","unreadMessagesForAllProjectsSelector","unreadMessagesForTaskSelector","task","tasksCreatedByTheUserSelector","createdTasks","connect","settings","ListOfUsers","selectedUsers","setSelectedUsers","Checkbox","checked","inputProps","fullWidth","size","paper","padding","minHeight","marginTop","marginBottom","SelectionOfAvailableUsers","availableUsers","selectedUsersView","Grid","item","Chip","split","label","clickable","onDelete","container","direction","xs","Paper","onSubmit","dialogContent","placeForMessages","inputMessage","AddWorkers","Dialog","isOpenMenuAddingWorkers","setIsOpenMenuAddingWorkers","DialogTitle","DialogContent","margin","marginLeft","ProjectInList","currentTasks","tasksOfUser","unreadMessagesForProject","elevation","showZero","Divider","anchorOrigin","vertical","horizontal","userAccessibleTasks","ListOfProjects","projectsForUser","Container","Priority","ml","Description","component","setIsOpenMoreInformation","WorkersAccordion","Accordion","AccordionSummary","expandIcon","AccordionDetails","DescriptionAccordion","subTitle","TitleForDialog","AllInformationOfTask","isOpenMoreInformation","TaskContent","React","CardContent","alignContent","createStyles","maxWidth","minWidth","Message","gutterBottom","allMessage","paddingLeft","paddingRight","paddingBottom","messageRight","messageLeft","grey","AllMessage","messages","index","flexDirection","CommunicationWindow","currentMessage","setCurrentMessage","isOpenMessages","setIsOpenMessages","OutlinedInput","multiline","maxRows","placeholder","onChange","target","value","endAdornment","InputAdornment","defaultValue","root","RunningTask","Card","m","LinearProgress","ReviewTask","ButtonGroup","CurrentTask","AvailableTasks","md","hidden","ReadyTasks","green","CompletedTask","fontSize","readyTasks","CreatedTasks","tasksCreatedByTheUser","ListOfTasks","setValue","Tabs","newValue","indicatorColor","textColor","Tab","onChangeIndex","CurrentTasks","AddTaskForm","useForm","mode","register","errors","formState","handleSubmit","reset","currentProjectName","noValidate","autoComplete","formData","TextField","required","error","helperText","max","type","SelectionOfMultipleUsers","isError","AddProjectForm","setIsError","submited","setSubmited","useEffect","board","Board","lg","workBoard","WorkBoard","runningTasks","reviewTasks","completedTasks","selectTasksByStatus","rowAccessLevels","accessesString","row","num","ListOfAccesses","listOfAccesses","selectedAccesses","setSelectedAccesses","access","ChoiceOfAccessLevels","console","log","AddUserForm","App","createTheme","ThemeProvider","path","render","WorkBoardContainer","ListOfTasksContainer","ListOfProjectsContainer","AddTaskFormContainer","AddProjectFormContainer","AddUserFormContainer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","userReducer","projectReducer","settingsReducer","ReactDOM","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.2a4058e2.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\nimport { userType } from '../types/types'\r\n\r\ntype initialStateType = {\r\n    currentUser: userType\r\n    users: Array<userType>\r\n}\r\n\r\nconst initialState: initialStateType = {\r\n    currentUser: {id: 6, name: 'Saitama', surname: 'One-Punch Man', position: 'general director', accesses: [1,2,3,4,5], projects: [0,1,2,3]},\r\n    users: [\r\n        {id: 0, name: 'Roman', surname: 'Lukichev', position: 'frontend developer', accesses: [1], projects: [0,2,3]}, //accessLevel: 1 означает что есть доступ к разработке\r\n        {id: 1, name: 'Anya', surname: 'Deryabina', position: 'tester', accesses: [2], projects: [0,2,3]}, //accessLevel: 2 означает что есть доступ к тестированию и проверке\r\n        {id: 2, name: 'Andrey', surname: 'Lukichev', position: 'team leader', accesses: [1,2,3,4], projects: [0,3]}, //accessLevel: 3 означает что есть доступ к созданию задач\r\n        {id: 3, name: 'Alex', surname: 'Leenders', position: 'team leader', accesses: [1,2,3], projects: [1,2]},//accessLevel: 4 означает что есть доступ к созданию проектов и их редактированию\r\n        {id: 4, name: 'John', surname: 'Constantin', position: 'frontend developer', accesses: [1], projects: [1]},//accessLevel: 5 означает что есть доступ к созданию пользователей\r\n        {id: 5, name: 'Frodo', surname: 'Baggins', position: 'tester', accesses: [2], projects: [1]},\r\n        {id: 6, name: 'Saitama', surname: 'One-Punch Man', position: 'general director', accesses: [1,2,3,4,5], projects: [0,1,2,3]},\r\n    ]\r\n}\r\n\r\nexport const userSlice = createSlice({\r\n    name: 'users',\r\n    initialState,\r\n    reducers: {\r\n        setCurrentUser: (state,action) => {\r\n            state.currentUser = action.payload\r\n        },\r\n        addUser: (state,action:{payload: {name: string, surname: string, position: string, accesses: Array<number>}}) => {\r\n            const newUser = {\r\n                id: state.users[state.users.length-1].id + 1,\r\n                name: action.payload.name,\r\n                surname: action.payload.surname,\r\n                position: action.payload.position,\r\n                accesses: action.payload.accesses,\r\n                projects: []\r\n            }\r\n            state.users.push(newUser)\r\n        },\r\n        addProjectInArrayOfUsers: (state,action:{payload: {users: Array<number>, projectId: number}}) => {\r\n            action.payload.users.forEach(el => {\r\n                state.users.find(user => user.id === el)?.projects.push(action.payload.projectId)\r\n            })\r\n        },\r\n    },\r\n})\r\n\r\nexport const { setCurrentUser, addUser, addProjectInArrayOfUsers} = userSlice.actions\r\n\r\nexport default userSlice.reducer","import {createSlice} from '@reduxjs/toolkit'\r\nimport {projectType, taskType, userType} from '../types/types';\r\n\r\nexport type initialStateType = {\r\n    currentProjectId: number | null\r\n    projects: Array<projectType>\r\n}\r\n\r\nconst initialState: initialStateType = {\r\n    currentProjectId: 0,\r\n    projects: [{\r\n        id: 0,\r\n        name: 'Task management system',\r\n        developersId: [0, 1, 2, 6],\r\n        tasks: [{\r\n            id: 0,\r\n            name: 'Create repository',\r\n            description: 'This makes the changes in your file available to people you are working with.',\r\n            priority: 7,\r\n            status: 'newTask', //development значит кто то взял задачу, testing - кто то тестирует, ready - готово\r\n            communication: [],\r\n            developer: null,\r\n            forReview: null,\r\n            tester: null,\r\n            creator: {id: 2, name: 'Andrey', surname: 'Lukichev', position: 'team leader', accesses: [1,2,3], projects: [0,3]},\r\n        }, {\r\n            id: 1,\r\n            name: 'Create React app',\r\n            description: 'ReactJS offers graceful solutions to some of front-end programming’s most persistent issues, ' +\r\n                'allowing you to build dynamic and interactive web apps with ease. It’s fast, scalable, flexible, ' +\r\n                'powerful, and has a robust developer community that’s rapidly growing. There’s never been a better ' +\r\n                'time to learn React.',\r\n            priority: 6,\r\n            status: 'newTask', //development значит кто то взял задачу, testing - кто то тестирует, ready - готово\r\n            communication: [],\r\n            developer: null,\r\n            forReview: null,\r\n            tester: null,\r\n            creator: {id: 2, name: 'Andrey', surname: 'Lukichev', position: 'team leader', accesses: [1,2,3], projects: [0,3]},\r\n        },\r\n            {\r\n                id: 2,\r\n                name: 'Initial Project',\r\n                description: 'It’s fast, scalable, flexible, powerful, and has a robust developer community that’s rapidly ' +\r\n                    'growing. There’s never been a better time to learn React.',\r\n                priority: 3,\r\n                status: 'newTask', //development значит кто то взял задачу, testing - кто то тестирует, ready - готово\r\n                communication: [],\r\n                developer: null,\r\n                forReview: null,\r\n                tester: null,\r\n                creator: {id: 2, name: 'Andrey', surname: 'Lukichev', position: 'team leader', accesses: [1,2,3], projects: [0,3]},\r\n            },]\r\n    }, {\r\n        id: 1,\r\n        name: 'Shop online',\r\n        developersId: [3, 4, 5, 6],\r\n        tasks: [{\r\n            id: 0,\r\n            name: 'Create repository',\r\n            description: 'This makes the changes in your file available to people you are working with.',\r\n            priority: 7,\r\n            status: 'newTask', //development значит кто то взял задачу, testing - кто то тестирует, ready - готово\r\n            communication: [],\r\n            developer: null,\r\n            forReview: null,\r\n            tester: null,\r\n            creator: {id: 3, name: 'Alex', surname: 'Leenders', position: 'team leader', accesses: [1,2,3], projects: [1,2]},\r\n        }, {\r\n            id: 1,\r\n            name: 'Create React app',\r\n            description: 'ReactJS offers graceful solutions to some of front-end programming’s most persistent issues, ' +\r\n                'allowing you to build dynamic and interactive web apps with ease. It’s fast, scalable, flexible, ' +\r\n                'powerful, and has a robust developer community that’s rapidly growing. There’s never been a better ' +\r\n                'time to learn React.',\r\n            priority: 6,\r\n            status: 'newTask', //development значит кто то взял задачу, testing - кто то тестирует, ready - готово\r\n            communication: [],\r\n            developer: null,\r\n            forReview: null,\r\n            tester: null,\r\n            creator: {id: 3, name: 'Alex', surname: 'Leenders', position: 'team leader', accesses: [1,2,3], projects: [1,2]},\r\n        },\r\n            ]\r\n    },{\r\n        id: 2,\r\n        name: 'New project',\r\n        developersId: [0, 1, 3, 6],\r\n        tasks: [{\r\n            id: 0,\r\n            name: 'create project',\r\n            description: 'This makes the changes in your file available to people you are working with.',\r\n            priority: 7,\r\n            status: 'newTask', //development значит кто то взял задачу, testing - кто то тестирует, ready - готово\r\n            communication: [],\r\n            developer: null,\r\n            forReview: null,\r\n            tester: null,\r\n            creator: {id: 3, name: 'Alex', surname: 'Leenders', position: 'team leader', accesses: [1,2,3], projects: [1,2]},\r\n        },]\r\n    },{\r\n        id: 3,\r\n        name: 'New project 33',\r\n        developersId: [0, 1, 2, 6,],\r\n        tasks: [{\r\n            id: 0,\r\n            name: 'create project',\r\n            description: 'This makes the changes in your file available to people you are working with.',\r\n            priority: 7,\r\n            status: 'newTask', //development значит кто то взял задачу, testing - кто то тестирует, ready - готово\r\n            communication: [],\r\n            developer: null,\r\n            forReview: null,\r\n            tester: null,\r\n            creator: {id: 2, name: 'Andrey', surname: 'Lukichev', position: 'team leader', accesses: [1,2,3], projects: [0,3]},\r\n        },]\r\n    }]\r\n}\r\n\r\nexport const projectSlice = createSlice({\r\n    name: 'projects',\r\n    initialState,\r\n    reducers: {\r\n        takeTaskForDevelopment: (state:initialStateType, action:{payload: {developer: userType, taskId: number}}) => {\r\n            let indexProject = state.projects.findIndex(el => el.id === state.currentProjectId);\r\n            let indexTask = state.projects[indexProject].tasks.findIndex(el => el.id === action.payload.taskId);\r\n            state.projects[indexProject].tasks[indexTask].status = 'development';\r\n            state.projects[indexProject].tasks[indexTask].developer = action.payload.developer;\r\n        },\r\n        takeTaskForReview: (state:initialStateType, action:{payload: {tester: userType, taskId: number}}) => {\r\n            let indexProject = state.projects.findIndex(el => el.id === state.currentProjectId);\r\n            let indexTask = state.projects[indexProject].tasks.findIndex(el => el.id === action.payload.taskId);\r\n            state.projects[indexProject].tasks[indexTask].status = 'testing';\r\n            state.projects[indexProject].tasks[indexTask].tester = action.payload.tester;\r\n        },\r\n        giveTaskForReview: (state:initialStateType, action:{payload: {taskId: number}}) => {\r\n            let indexProject = state.projects.findIndex(el => el.id === state.currentProjectId);\r\n            let indexTask = state.projects[indexProject].tasks.findIndex(el => el.id === action.payload.taskId);\r\n            state.projects[indexProject].tasks[indexTask].forReview = true;\r\n        },\r\n        approveTask: (state:initialStateType, action:{payload: {taskId: number}}) => {\r\n            let indexProject = state.projects.findIndex(el => el.id === state.currentProjectId);\r\n            let indexTask = state.projects[indexProject].tasks.findIndex(el => el.id === action.payload.taskId);\r\n            state.projects[indexProject].tasks[indexTask].status = 'ready';\r\n        },\r\n        sendMessage: (state:initialStateType, action:{payload: {message: string, author: userType, taskId: number}}) => {\r\n            let indexProject = state.projects.findIndex(el => el.id === state.currentProjectId);\r\n            let indexTask = state.projects[indexProject].tasks.findIndex(el => el.id === action.payload.taskId);\r\n            const lengthMessages = state.projects[indexProject].tasks[indexTask].communication.length;\r\n            const id = lengthMessages === 0? 0 : state.projects[indexProject].tasks[indexTask].communication[lengthMessages - 1].id +1;\r\n            state.projects[indexProject].tasks[indexTask].communication.push({id: id, message: action.payload.message, author: action.payload.author, whoRead: [action.payload.author.id]});\r\n        },\r\n        takeTaskForRevision: (state:initialStateType, action:{payload: {taskId: number}}) => {\r\n            let indexProject = state.projects.findIndex(el => el.id === state.currentProjectId);\r\n            let indexTask = state.projects[indexProject].tasks.findIndex(el => el.id === action.payload.taskId);\r\n            state.projects[indexProject].tasks[indexTask].status = 'development';\r\n            state.projects[indexProject].tasks[indexTask].forReview = false;\r\n        },\r\n        setCurrentProjectId: (state:initialStateType, action:{payload: {currentProject: number | null}}) => {\r\n            state.currentProjectId = action.payload.currentProject;\r\n        },\r\n        addNewTaskToProject: (state:initialStateType, action:{payload:\r\n                {currentUser: userType, name: string, description: string, priority: number}}) => {\r\n            let indexProject = state.projects.findIndex(el => el.id === state.currentProjectId);\r\n            const newTask: taskType = {\r\n                id: state.projects[indexProject].tasks.length !==0?\r\n                    state.projects[indexProject].tasks[state.projects[indexProject].tasks.length - 1].id + 1\r\n                    : 0,\r\n                name: action.payload.name,\r\n                description: action.payload.description,\r\n                priority: action.payload.priority,\r\n                status: 'newTask', //development значит кто то взял задачу, testing - кто то тестирует, ready - готово\r\n                communication: [],\r\n                developer: null,\r\n                forReview: null,\r\n                tester: null,\r\n                creator: action.payload.currentUser,\r\n            }\r\n            state.projects[indexProject].tasks.push(newTask);\r\n        },\r\n        addNewProject: (state:initialStateType, action:{payload:{name: string, developersId: Array<number>}}) => {\r\n            const newProject:projectType = {\r\n                id: state.projects[state.projects.length-1].id + 1,\r\n                name: action.payload.name,\r\n                developersId: action.payload.developersId,\r\n                tasks: []\r\n            }\r\n            state.projects.push(newProject)\r\n        },\r\n        addNewUserToProject: (state:initialStateType, action:{payload: {users: Array<userType>, projectId: number}}) =>\r\n        {\r\n            const newDevelopersId = action.payload.users.map(el => el.id);\r\n            const oldDevelopersId = state.projects.filter(el => el.id === action.payload.projectId)[0].developersId\r\n            state.projects.filter(el => el.id === action.payload.projectId)[0].developersId = [...oldDevelopersId, ...newDevelopersId]\r\n        },\r\n        readAllMessageInTask: (state:initialStateType, action:{payload: {userId: number, taskId: number}}) =>\r\n        {\r\n            let indexProject = state.projects.findIndex(el => el.id === state.currentProjectId);\r\n            let indexTask = state.projects[indexProject].tasks.findIndex(el => el.id === action.payload.taskId);\r\n            state.projects[indexProject].tasks[indexTask].communication.forEach(el => {\r\n                el.whoRead = el.whoRead.includes(action.payload.userId) ? el.whoRead : [...el.whoRead, action.payload.userId]\r\n            })\r\n        }\r\n    },\r\n\r\n})\r\n\r\nexport const {takeTaskForDevelopment, takeTaskForReview, giveTaskForReview, approveTask, sendMessage,\r\n    takeTaskForRevision, setCurrentProjectId, addNewTaskToProject, addNewProject, addNewUserToProject,\r\n    readAllMessageInTask} = projectSlice.actions\r\n\r\nexport default projectSlice.reducer","import {createSlice} from '@reduxjs/toolkit'\r\nimport {colorsThemeType, userType} from '../types/types'\r\n\r\ntype initialStateType = {\r\n    currentColor: colorsThemeType\r\n    colors: Array<colorsThemeType>\r\n}\r\n\r\nconst initialState: initialStateType = {\r\n    currentColor: {\r\n        name: 'start',\r\n        primary: {\r\n            main: '#3F51B5',\r\n        },\r\n        secondary: {\r\n            main: '#2979ff',\r\n        },\r\n    },\r\n    colors: [{\r\n        name: 'yellow',\r\n        primary: {\r\n            main: '#f9a825',\r\n        },\r\n        secondary: {\r\n            main: '#f9a825',\r\n        },\r\n    }, {\r\n        name: ' teal',\r\n        primary: {\r\n            main: '#009688',\r\n        },\r\n        secondary: {\r\n            main: '#1de9b6',\r\n        },\r\n    }, {\r\n        name: 'purple',\r\n        primary: {\r\n            main: '#6a1b9a',\r\n        },\r\n        secondary: {\r\n            main: '#6a1b9a',\r\n        },\r\n    }, {\r\n        name: 'lime',\r\n        primary: {\r\n            main: '#9e9d24',\r\n        },\r\n        secondary: {\r\n            main: '#9e9d24',\r\n        },\r\n    }, {\r\n        name: 'blue',\r\n        primary: {\r\n            main: '#2196f3',\r\n        },\r\n        secondary: {\r\n            main: '#2979ff',\r\n        },\r\n    }, {\r\n        name: 'green',\r\n        primary: {\r\n            main: '#2e7d32',\r\n        },\r\n        secondary: {\r\n            main: '#2e7d32',\r\n        },\r\n    }, {\r\n        name: 'start',\r\n        primary: {\r\n            main: '#3F51B5',\r\n        },\r\n        secondary: {\r\n            main: '#2979ff',\r\n        },\r\n    }\r\n\r\n    ]\r\n}\r\n\r\nexport const userSlice = createSlice({\r\n    name: 'users',\r\n    initialState,\r\n    reducers: {\r\n        setCurrentColor: (state, action: { payload: { name: string } }) => {\r\n            state.currentColor = state.colors.filter(el => el.name === action.payload.name)[0]\r\n        },\r\n    },\r\n})\r\n\r\nexport const {setCurrentColor,} = userSlice.actions\r\n\r\nexport default userSlice.reducer","import React, {useState} from \"react\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport ListAltIcon from '@material-ui/icons/ListAlt';\r\nimport PlaylistAddIcon from '@material-ui/icons/PlaylistAdd';\r\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport AccountTreeIcon from '@material-ui/icons/AccountTree';\r\nimport {projectType} from \"../../../types/types\";\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport {Badge} from \"@material-ui/core\";\r\n\r\ntype DrawerMenuPropsType = {\r\n    accesses: Array<number>\r\n    isOpenLeftMenu: boolean\r\n    setIsOpenLeftMenu: (arg: boolean) => void\r\n    currentProject: projectType | null\r\n    currentProjectId: number | null\r\n    messagesForCurrentProject: number\r\n    messagesForAllProjects: number\r\n}\r\ntype ListPropsType = {\r\n    url: string\r\n    text: string\r\n    icon: any\r\n    badgeContent?: number\r\n}\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    list: {\r\n        width: 250,\r\n        color: \"unset\",\r\n        textDecoration: \"none\"\r\n    },\r\n    fullList: {\r\n        width: 180,\r\n        height: 25,\r\n        overflow: \"hidden\",\r\n        textOverflow: \"ellipsis\"\r\n    },\r\n});\r\n\r\nconst List = (props: ListPropsType) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <NavLink to={props.url ? props.url : '/boards'} className={classes.list}>\r\n            <ListItem button key={props.text}>\r\n                <ListItemIcon>{props.icon}</ListItemIcon>\r\n                <ListItemText primary={props.text}/>\r\n                {props.badgeContent? <Badge color=\"error\" badgeContent={props.badgeContent} variant={\"dot\"}/> : null}\r\n            </ListItem>\r\n        </NavLink>\r\n    )\r\n}\r\n\r\nfunction DrawerMenu(props: DrawerMenuPropsType) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Drawer variant={'persistent'} open={props.isOpenLeftMenu}>\r\n            <Box display=\"flex\" p={1}>\r\n                <Box alignSelf={'center'} flexGrow={1} p={1}>\r\n\r\n                    <Typography className={classes.fullList} variant=\"subtitle1\" color={\"primary\"}>\r\n                        {props.currentProjectId === null ? \"no projects available\" : props.currentProject?.name}\r\n                    </Typography>\r\n                    <Typography variant=\"caption\">WorkBoards v0.01</Typography>\r\n                </Box>\r\n                <Box p={1} alignSelf={'center'} justifyContent=\"flex-end\">\r\n                    <IconButton edge=\"start\"\r\n                                onClick={() => props.setIsOpenLeftMenu(false)}\r\n                                color=\"primary\" aria-label=\"menu\">\r\n                        <ArrowBackIosIcon/>\r\n                    </IconButton>\r\n                </Box>\r\n            </Box>\r\n                <List url={'/projects'} icon={<AccountTreeIcon/>} text={\"Projects\"} badgeContent={props.messagesForAllProjects}/>\r\n            <List url={'/currentProject'} icon={<DashboardIcon/>} text={\"Current project\"} badgeContent={props.messagesForCurrentProject}/>\r\n            <List url={'/currentTasks'} icon={<ListAltIcon/>} text={\"My tasks\"} badgeContent={props.messagesForCurrentProject}/>\r\n            {props.accesses.includes(3) && <List url={'/addTaskForm'} icon={<PlaylistAddIcon/>} text={\"Add tasks\"}/>}\r\n            {props.accesses.includes(4) && <List url={'/addProjectForm'} icon={<NoteAddIcon/>} text={\"Add project\"}/>}\r\n            {props.accesses.includes(5) && <List url={'/addUserForm'} icon={<PersonAddIcon/>} text={\"Add user\"}/>}\r\n        </Drawer>\r\n    );\r\n}\r\n\r\nexport default DrawerMenu;\r\n","import React, {useState} from \"react\";\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport {HeaderPropsType} from \"../HeaderContainer\";\r\nimport {userType} from \"../../../types/types\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    button: {\r\n        color: theme.palette.primary.contrastText,\r\n    },\r\n    menuItem: {\r\n        backgroundColor: indigo[100],\r\n    },\r\n    list: {\r\n        maxHeight: 500,\r\n        overflow: \"auto\",\r\n    }\r\n}));\r\n\r\ntype UserSelectionMenuPropsType = {\r\n    setCurrentUser: (payload: userType) => void\r\n    setCurrentProjectId: (payload: {currentProject: number | null}) => void\r\n    users: Array<userType>\r\n    currentUser: userType\r\n    currentProjectId: number | null\r\n}\r\n\r\nconst UserSelectionMenu: React.FC<UserSelectionMenuPropsType> = function ({setCurrentUser, setCurrentProjectId, currentUser, users, currentProjectId, ...props}:UserSelectionMenuPropsType) {\r\n    const classes = useStyles();\r\n\r\n    const listOfUsers = users.map(el => <MenuItem className={currentUser.id === el.id? classes.menuItem : ''}\r\n                                                  onClick={() => {\r\n                                                      setCurrentUser(el);\r\n                                                      setCurrentProjectId(\r\n                                                          el.projects.length === 0\r\n                                                              ? {currentProject: null}\r\n                                                              : {currentProject: el.projects.includes(currentProjectId)? currentProjectId : el.projects[0]});\r\n                                                      handleClose()\r\n                                                  }}>\r\n        {`${el.name} ${el.surname} (${el.position})`}\r\n    </MenuItem>)\r\n\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const handleClick = (event: any) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (<div>\r\n            <Button className={classes.button} onClick={handleClick} endIcon={<MoreVertIcon/>}>\r\n                {`${currentUser.name} ${currentUser.surname} (${currentUser.position})`}\r\n            </Button>\r\n            <Menu\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n                className={classes.list}\r\n            >\r\n                {listOfUsers}\r\n            </Menu>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserSelectionMenu;\r\n","import React, {useState} from \"react\";\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport {HeaderPropsType} from \"../HeaderContainer\";\r\nimport {colorsThemeType} from \"../../../types/types\";\r\nimport {Avatar, Box, Grid} from \"@material-ui/core\";\r\nimport ColorLensOutlinedIcon from '@material-ui/icons/ColorLensOutlined';\r\n\r\nconst uniqueUseStyles = (color: string) => {\r\n    return makeStyles((theme) => ({\r\n        avatar: {\r\n            backgroundColor: color,\r\n        },\r\n    }))()\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n        box: {\r\n            maxHeight: 200,\r\n            overflowY: 'auto'\r\n        },\r\n        icon: {\r\n            color: theme.palette.primary.contrastText\r\n        }\r\n    }))\r\n\r\ntype ColorSelectionMenuPropsType = {\r\n    colors: Array<colorsThemeType>\r\n    setCurrentColor: (payload: { name: string }) => void\r\n    currentColor: colorsThemeType\r\n    setColor: (param: {\r\n        palette: {\r\n            primary: { main: string }, secondary: { main: string }\r\n        }\r\n    }) => void\r\n};\r\n\r\nconst ColorSelectionMenu: React.FC<ColorSelectionMenuPropsType> = function (\r\n    {colors, setCurrentColor, currentColor, setColor}: ColorSelectionMenuPropsType) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const listOfColor = colors.map(el => {\r\n        return (\r\n            <MenuItem onClick={() => {\r\n                setCurrentColor({name: el.name});\r\n                setColor({\r\n                    palette: {\r\n                        primary: {main: el.primary.main},\r\n                        secondary: {main: el.secondary.main}\r\n                    }\r\n                })\r\n                handleClose()\r\n            }}>\r\n                <Avatar className={uniqueUseStyles(el.primary.main).avatar}>\r\n                    <ColorLensOutlinedIcon/>\r\n                </Avatar>\r\n            </MenuItem>\r\n        )\r\n    });\r\n\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const handleClick = (event: any) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (<div>\r\n            <Button onClick={handleClick}>\r\n                <Avatar className={uniqueUseStyles(currentColor.primary.main).avatar}>\r\n                    <ColorLensOutlinedIcon className={classes.icon}/>\r\n                </Avatar>\r\n            </Button>\r\n            <Menu\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n                <Box className={classes.box}>\r\n                {listOfColor}\r\n                </Box>\r\n            </Menu>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ColorSelectionMenu;\r\n","import React, {useState} from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport DrawerMenu from \"./DrawerMenu/DrawerMenu\";\r\nimport UserSelectionMenu from \"./UserSelectionMenu/UserSelectionMenu\";\r\nimport {HeaderPropsType} from \"./HeaderContainer\";\r\nimport ColorSelectionMenu from \"./ColorSelectionMenu/ColorSelectionMenu\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    menuButton: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nconst Header: React.FC<HeaderPropsType> = function (props:HeaderPropsType) {\r\n\r\n    const [isOpenLeftMenu, setIsOpenLeftMenu] = useState(false);\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Box width={'100%'}>\r\n            <DrawerMenu currentProject={props.currentProject} accesses={props.currentUser.accesses}\r\n                        isOpenLeftMenu={isOpenLeftMenu} setIsOpenLeftMenu={setIsOpenLeftMenu} messagesForCurrentProject={props.messagesForCurrentProject}\r\n                        currentProjectId={props.currentProjectId} messagesForAllProjects={props.messagesForAllProjects}/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton}\r\n                                onClick={() => setIsOpenLeftMenu(true)}\r\n                                color=\"inherit\" aria-label=\"menu\" >\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography align={'left'} variant=\"h6\" className={classes.title}>\r\n                        WorkBoards\r\n                    </Typography>\r\n                    <Box display={\"flex\"} alignItems=\"center\">\r\n                        <ColorSelectionMenu colors={props.colors} currentColor={props.currentColor}\r\n                                            setCurrentColor={props.setCurrentColor} setColor={props.setColor}/>\r\n                        <UserSelectionMenu users={props.users} setCurrentUser={props.setCurrentUser}\r\n                                           currentUser={props.currentUser} currentProjectId={props.currentProjectId}\r\n                                           setCurrentProjectId={props.setCurrentProjectId}/>\r\n                    </Box>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import {projectType, taskType, userType} from \"../../types/types\";\r\n\r\nexport function currentProjectSelector(projects: Array<projectType>, currentProjectId: number | null) {\r\n    const currentProject = currentProjectId !== null ? projects.filter(el => el.id === currentProjectId)[0] : null;\r\n    return currentProject\r\n}\r\n\r\nexport function ProjectsForUserSelector(projects: Array<projectType> | [], currentUserId: number) {\r\n    const UserProjects = projects.length !== 0? projects.filter(el => el.developersId.includes(currentUserId)) : [];\r\n    return UserProjects\r\n} // отбирает проекты в которых задействован юзер\r\n\r\nexport function newTasksSelector(tasks: Array<taskType>) {\r\n    const newTasks = tasks.filter(el => el.status === 'newTask');\r\n    return newTasks\r\n} // отбирает только созданные задачи для отдельлного проекта\r\n\r\nexport function availableTestingTaskSelector(tasks: Array<taskType>) {\r\n    const newTasks = tasks.filter(el => el.forReview && el.tester === null);\r\n    return newTasks\r\n}\r\n\r\nexport function tasksInProjectForUserSelector(projects: Array<projectType>, currentUserId: number, currentProject: number| null) {\r\n    const tasksForUser = currentProject !== null? projects.filter(el => el.id === currentProject)[0].tasks.filter(el =>\r\n        (el.developer?.id === currentUserId || el.tester?.id === currentUserId /*|| el.creator?.id === currentUserId*/)\r\n    ) : []\r\n    return tasksForUser\r\n}\r\n\r\n// возвращает массив доступных для пользователя новых задач\r\nexport function userAccessibleTasksSelector(projects: Array<projectType>, currentUser: userType, currentProject: number| null) {\r\n    const accessibleDeveloperTasks = currentUser.accesses.includes(1) && currentProject !== null\r\n        ?projects.filter(el => el.id === currentProject)[0].tasks.filter(el => el.status === 'newTask')\r\n        :[]\r\n    const accessibleTesterTasks = currentUser.accesses.includes(2) && currentProject !== null\r\n        ?projects.filter(el => el.id === currentProject)[0].tasks.filter(el => el.tester === null && el.forReview === true )\r\n        :[]\r\n    return [...accessibleDeveloperTasks, ...accessibleTesterTasks]\r\n}\r\n\r\nexport function currentProjectNameSelector(projects: Array<projectType>, currentProjectId: number| null) {\r\n    const currentProjectName = currentProjectId? projects.filter(el => el.id === currentProjectId)[0].name: null\r\n    return currentProjectName\r\n}\r\n\r\nexport function usersForAddingToProjectSelector(project: projectType, users: Array<userType>) {\r\n    const usersForAdding = users.filter(el => !project.developersId.includes(el.id))\r\n    return usersForAdding\r\n}\r\n\r\nexport function unreadMessagesForProjectSelector(project: projectType | { tasks: Array<taskType> }, currentUserId: number) {\r\n    const unreadMessagesLength: Array<number> = []\r\n    project.tasks.forEach(el => {\r\n        (el.tester?.id === currentUserId || el.developer?.id === currentUserId || el.creator?.id === currentUserId)\r\n        && el.communication.forEach(el => {\r\n            !el.whoRead.includes(currentUserId) && unreadMessagesLength.push(1) \r\n        })\r\n    })\r\n    return unreadMessagesLength.length\r\n}\r\n\r\nexport function unreadMessagesForAllProjectsSelector(projects: Array<projectType>, currentUserId: number) {\r\n    const unreadMessagesLength: Array<number> = []\r\n    projects.forEach(project => {\r\n        project.developersId.includes(currentUserId) && project.tasks.forEach(el => {\r\n            (el.tester?.id === currentUserId || el.developer?.id === currentUserId || el.creator?.id === currentUserId)\r\n            && el.communication.forEach(el => {\r\n                !el.whoRead.includes(currentUserId) && unreadMessagesLength.push(1)\r\n            })\r\n        })\r\n    })\r\n\r\n    return unreadMessagesLength.length\r\n}\r\n\r\nexport function unreadMessagesForTaskSelector(task: taskType, currentUserId: number) {\r\n    const unreadMessagesLength = task.communication.filter(el => !el.whoRead.includes(currentUserId)).length\r\n    return unreadMessagesLength\r\n}\r\n\r\nexport function tasksCreatedByTheUserSelector(project: projectType, currentUserId: number) {\r\n    const createdTasks: Array<taskType> = []\r\n    project.tasks.forEach(el => {\r\n        (el.creator?.id === currentUserId) && createdTasks.push(el)\r\n        })\r\n    return createdTasks\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {setCurrentUser,} from \"../../store/users-reducer\";\r\nimport {setCurrentProjectId} from '../../store/projects-reducer';\r\nimport {setCurrentColor,} from \"../../store/settings-reducer\";\r\nimport Header from \"./Header\";\r\nimport {RootState} from \"../../store/store\";\r\nimport {colorsThemeType, projectType, userType} from \"../../types/types\";\r\nimport {\r\n    currentProjectSelector,\r\n    unreadMessagesForAllProjectsSelector, unreadMessagesForProjectSelector\r\n} from \"../../utils/selectors/currentProject-selector\";\r\n\r\ntype OwnProps = {\r\n    setColor: (param: {palette: {primary: {main: string}, secondary: {main: string}\r\n        }}) => void\r\n}\r\n\r\ntype MapStateToProps = {\r\n    messagesForAllProjects: number\r\n    messagesForCurrentProject: number\r\n    users: Array<userType>\r\n    currentUser: userType\r\n    currentProjectId: number | null\r\n    colors: Array<colorsThemeType>\r\n    currentColor: colorsThemeType\r\n    currentProject: projectType | null\r\n}\r\ntype MapDispatchToProps = {\r\n    setCurrentUser: (payload: userType) => void\r\n    setCurrentProjectId: (payload: {currentProject: number | null}) => void\r\n    setCurrentColor: (payload: {name: string}) => void\r\n}\r\nexport type HeaderPropsType = MapStateToProps & MapDispatchToProps & OwnProps;\r\n\r\nlet mapStateToProps = (state: RootState) => {\r\n    return {\r\n        users: state.users.users,\r\n        currentUser: state.users.currentUser,\r\n        currentProjectId: state.projects.currentProjectId,\r\n        colors: state.settings.colors,\r\n        currentColor: state.settings.currentColor,\r\n        currentProject: currentProjectSelector(state.projects.projects, state.projects.currentProjectId),\r\n        messagesForAllProjects: unreadMessagesForAllProjectsSelector(state.projects.projects, state.users.currentUser.id),\r\n        messagesForCurrentProject: unreadMessagesForProjectSelector(state.projects.projects.filter(el => el.id === state.projects.currentProjectId)[0],\r\n            state.users.currentUser.id)\r\n    }\r\n}\r\n\r\nexport default connect<MapStateToProps, MapDispatchToProps, OwnProps, RootState>(mapStateToProps,\r\n    {setCurrentUser, setCurrentProjectId, setCurrentColor})(Header)\r\n\r\n","import React, {useMemo, useState} from \"react\";\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport {userType} from \"../../../types/types\";\r\nimport {Avatar, Box, Checkbox, Chip, Container, Grid, Paper} from \"@material-ui/core\";\r\n\r\ntype ListOfUsersPropsType = {\r\n    users: Array<userType>\r\n    selectedUsers: Array<userType> | any[]\r\n    setSelectedUsers: (arg0: Array<userType> | any[]) => void\r\n}\r\n\r\nconst ListOfUsers: React.FC<ListOfUsersPropsType> = function (props: ListOfUsersPropsType) {\r\n\r\n    const listOfUsers = props.users.map(el =>\r\n        <MenuItem\r\n            onClick={() => {\r\n                props.selectedUsers.includes(el) ? props.setSelectedUsers([...props.selectedUsers.filter(user => el.id !== user.id)])\r\n                    : props.setSelectedUsers([...props.selectedUsers, el])\r\n            }}>\r\n            <Checkbox\r\n                checked={props.selectedUsers.includes(el)}\r\n                inputProps={{'aria-label': 'Checkbox A'}}\r\n            />\r\n            {`${el.name} ${el.surname} (${el.position})`}\r\n        </MenuItem>)\r\n\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const handleClick = (event: any) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button fullWidth onClick={handleClick} endIcon={<MoreVertIcon/>} color={'primary'}\r\n                    size={\"large\"} variant={\"contained\"}>select team</Button>\r\n            <Menu\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n                {listOfUsers}\r\n            </Menu>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ListOfUsers;\r\n","import React from \"react\";\r\nimport {Avatar, Chip, Container, Paper, Typography} from '@material-ui/core';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {userType} from \"../../../types/types\";\r\nimport ListOfUsers from \"../../AddProjectForm/ListOfUsers/ListOfUsers\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Box } from \"@material-ui/core\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: 5,\r\n        minHeight: 58,\r\n    },\r\n    button: {\r\n        marginTop: 5,\r\n        marginBottom: 5\r\n    }\r\n\r\n}));\r\n\r\ntype selectionOfMultipleUsersPropsType = {\r\n    projectId: number\r\n    availableUsers: Array<userType>\r\n    selectedUsers: Array<userType>\r\n    setSelectedUsers: (arg: Array<userType>) => void\r\n    onSubmit: () => void\r\n}\r\n\r\nconst SelectionOfAvailableUsers: React.FC<selectionOfMultipleUsersPropsType>\r\n    = function ({projectId, availableUsers, selectedUsers, setSelectedUsers, ...props}: selectionOfMultipleUsersPropsType) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const selectedUsersView = selectedUsers.map(el =>\r\n        <Grid item>\r\n            <Chip\r\n                avatar={<Avatar>{el.name.split('')[0]}{el.surname.split('')[0]}</Avatar>}\r\n                label={`${el.name} ${el.surname} (${el.position})`}\r\n                color=\"primary\"\r\n                clickable\r\n                onDelete={() => setSelectedUsers([...selectedUsers.filter(user => el.id !== user.id)])}\r\n            /></Grid>)\r\n\r\n    return (\r\n        <Grid container spacing={1} direction={'row'} alignItems={\"flex-start\"}>\r\n            <Grid item xs={9}>\r\n                <Paper className={classes.paper}>\r\n                    {selectedUsers.length === 0 ? <Typography variant={'subtitle1'}\r\n                                                              color={'textSecondary'}\r\n                                                              align={'left'}>select new workers for the project\r\n                            *</Typography>\r\n                        : <Grid container spacing={1} direction={'row'}>\r\n                            {selectedUsersView}\r\n                        </Grid>\r\n                    }\r\n                </Paper>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n                <ListOfUsers users={availableUsers}\r\n                             setSelectedUsers={setSelectedUsers}\r\n                             selectedUsers={selectedUsers}/>\r\n            </Grid>\r\n            <Grid container justifyContent={\"center\"}>\r\n                <Button className={classes.button} onClick={() => props.onSubmit()}\r\n                        size={\"large\"} variant={\"contained\"} color={'primary'}>\r\n                    Add to project</Button>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default SelectionOfAvailableUsers;\r\n","import React, {useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport {projectType, taskType, userType} from \"../../../types/types\";\r\nimport SelectionOfMultipleUsers from \"../../AddProjectForm/SelectionOfMultipleUsers\";\r\nimport SelectionOfAvailableUsers from \"./SelectionOfAvailableUsers\";\r\nimport {usersForAddingToProjectSelector} from \"../../../utils/selectors/currentProject-selector\";\r\nimport { Container } from \"@material-ui/core\";\r\n\r\ntype AddWorkersPropsType = {\r\n    setIsOpenMenuAddingWorkers: (arg: boolean) => void\r\n    isOpenMenuAddingWorkers: boolean\r\n    project: projectType\r\n    availableUsers: Array<userType>\r\n    addNewUserToProject: (payload: {users: Array<userType>, projectId: number}) => void\r\n    addProjectInArrayOfUsers: (payload: {users: Array<number>, projectId: number}) => void\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    dialogContent: {\r\n        overflow: \"hidden\",\r\n        overflowY: 'hidden',\r\n    },\r\n    placeForMessages: {\r\n        minHeight: 165,\r\n        maxHeight: 400,\r\n        marginTop: 10,\r\n        marginBottom: 10,\r\n        overflowY: 'auto'\r\n    },\r\n    inputMessage: {\r\n        marginBottom: 5,\r\n    },\r\n    button: {\r\n        width: 180\r\n    }\r\n}));\r\n\r\nconst AddWorkers: React.FC<AddWorkersPropsType> = function (props: AddWorkersPropsType) {\r\n\r\n    const classes = useStyles();\r\n\r\n    // массив пользователей которые добавятся для работы над проектом\r\n    const [selectedUsers, setSelectedUsers] = useState<Array<userType>>([])\r\n\r\n    const onSubmit = () => {\r\n        props.addNewUserToProject({projectId: props.project.id, users: selectedUsers});\r\n        props.addProjectInArrayOfUsers({users: selectedUsers.map(el => el.id), projectId: props.project.id});\r\n        props.setIsOpenMenuAddingWorkers(false);\r\n        setSelectedUsers([]);\r\n    }\r\n\r\n    return (\r\n        <Dialog\r\n            fullWidth={true}\r\n            open={props.isOpenMenuAddingWorkers}\r\n            onClose={() => props.setIsOpenMenuAddingWorkers(false)}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <Typography variant={'h6'} color={'primary'} align={\"center\"}>\r\n                    {`Adding workers to the project: \"${props.project.name}\"`}\r\n                </Typography>\r\n            </DialogTitle>\r\n            <DialogContent className={classes.dialogContent}>\r\n                <SelectionOfAvailableUsers projectId={props.project.id} availableUsers={props.availableUsers}\r\n                                           selectedUsers={selectedUsers} onSubmit={onSubmit} setSelectedUsers={setSelectedUsers}/>\r\n            </DialogContent>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default AddWorkers;\r\n","import React, {useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Button, Divider, Paper} from \"@material-ui/core\";\r\nimport {Typography} from \"@material-ui/core\";\r\nimport {Box} from \"@material-ui/core\";\r\nimport {Badge} from \"@material-ui/core\";\r\nimport {Link,} from \"react-router-dom\";\r\nimport {projectType, taskType, userType} from \"../../types/types\";\r\nimport AddWorkers from \"./ChangeProject/AddWorkers\";\r\nimport {\r\n    unreadMessagesForProjectSelector,\r\n    unreadMessagesForTaskSelector,\r\n    usersForAddingToProjectSelector\r\n} from \"../../utils/selectors/currentProject-selector\";\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\r\n\r\ntype ProjectInListPropsType = {\r\n    currentProjectId: number | null\r\n    project: projectType\r\n    setCurrentProjectId: (payload: { currentProject: number }) => void\r\n    currentUser: userType\r\n    tasksOfUser: Array<taskType>\r\n    userAccessibleTasks: Array<taskType>\r\n    users: Array<userType>\r\n    addNewUserToProject: (payload: { users: Array<userType>, projectId: number }) => void\r\n    addProjectInArrayOfUsers: (payload: { users: Array<number>, projectId: number }) => void\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    projects: {\r\n        margin: 10,\r\n        padding: 25,\r\n    },\r\n    button: {\r\n        marginLeft: 5\r\n    },\r\n    list: {\r\n        color: 'inherit',\r\n        textDecoration: 'none',\r\n    },\r\n    tasks: {\r\n        margin: 5,\r\n        marginLeft: 'auto'\r\n    },\r\n}));\r\n\r\nconst ProjectInList: React.FC<ProjectInListPropsType> = function (props: ProjectInListPropsType) {\r\n\r\n    const classes = useStyles();\r\n\r\n    let currentTasks = props.tasksOfUser.filter(el => el.status !== 'ready').length;\r\n\r\n    const [isOpenMenuAddingWorkers, setIsOpenMenuAddingWorkers] = useState<boolean>(false)\r\n\r\n    const unreadMessagesForProject = unreadMessagesForProjectSelector(props.project, props.currentUser.id)\r\n\r\n    return (\r\n        <Paper elevation={props.project.id === props.currentProjectId ? 10 : 2} className={classes.projects}\r\n               onClick={() => props.setCurrentProjectId({currentProject: props.project.id})}>\r\n            <Box display={'flex'} alignItems=\"center\" justifyContent=\"space-between\">\r\n                <Typography variant=\"h6\" color={props.project.id === props.currentProjectId ? 'secondary' : 'primary'}>\r\n                        {props.project.name}\r\n                        {unreadMessagesForProject !== 0 && <Badge color=\"error\" badgeContent={unreadMessagesForProject}>\r\n                            <MailOutlineIcon className={classes.button}/>\r\n                        </Badge> }\r\n                    {props.currentUser.accesses.includes(4) &&\r\n                    <Button className={classes.button} onClick={() => setIsOpenMenuAddingWorkers(true)}\r\n                            color={'primary'}>\r\n                        <GroupAddIcon/>\r\n                    </Button>}\r\n                </Typography>\r\n                <Box>\r\n                    <Badge color=\"primary\" badgeContent={currentTasks} showZero>\r\n                        <Typography>Current tasks</Typography>\r\n                    </Badge>\r\n                    <Divider className={classes.tasks}/>\r\n                    <Badge anchorOrigin={{vertical: 'bottom', horizontal: 'right'}}\r\n                           color=\"primary\" badgeContent={props.userAccessibleTasks.length} className={classes.tasks}\r\n                           showZero>\r\n                        <Typography>Available tasks</Typography>\r\n                    </Badge>\r\n                </Box>\r\n            </Box>\r\n            <AddWorkers setIsOpenMenuAddingWorkers={setIsOpenMenuAddingWorkers}\r\n                        addProjectInArrayOfUsers={props.addProjectInArrayOfUsers}\r\n                        isOpenMenuAddingWorkers={isOpenMenuAddingWorkers}\r\n                        addNewUserToProject={props.addNewUserToProject}\r\n                        project={props.project}\r\n                        availableUsers={usersForAddingToProjectSelector(props.project, props.users)}/>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default ProjectInList;","import React from \"react\";\r\nimport {PropsListOfProjectsType} from \"./ListOfProjectsContainer\";\r\nimport {Container, Typography} from \"@material-ui/core\";\r\nimport ProjectInList from \"./ProjectInList\";\r\nimport {\r\n    tasksInProjectForUserSelector,\r\n    userAccessibleTasksSelector\r\n} from \"../../utils/selectors/currentProject-selector\";\r\n\r\nconst ListOfProjects: React.FC<PropsListOfProjectsType> = function (props: PropsListOfProjectsType) {\r\n\r\n    const projects = props.projectsForUser.map(el => <ProjectInList currentProjectId={props.currentProjectId}\r\n                                                                    project={el}\r\n                                                                    currentUser={props.currentUser}\r\n                                                                    users={props.users}\r\n                                                                    addProjectInArrayOfUsers={props.addProjectInArrayOfUsers}\r\n                                                                    addNewUserToProject={props.addNewUserToProject}\r\n                                                                    tasksOfUser={\r\n                                                                        tasksInProjectForUserSelector([el], props.currentUser.id, el.id)}\r\n                                                                    userAccessibleTasks={\r\n                                                                        userAccessibleTasksSelector([el],props.currentUser, el.id)}\r\n                                                                    setCurrentProjectId={props.setCurrentProjectId}/>)\r\n\r\n    return (\r\n        <Container>\r\n            <Typography variant={'h6'} color={'primary'}>\r\n                {props.currentUser.projects.length === 0 ? 'you are not involved in any of the projects' : 'Select the project you want to work on'}\r\n            </Typography>\r\n            {projects}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default ListOfProjects;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {ProjectsForUserSelector} from \"../../utils/selectors/currentProject-selector\";\r\nimport {setCurrentProjectId, addNewUserToProject} from \"../../store/projects-reducer\";\r\nimport {addProjectInArrayOfUsers} from \"../../store/users-reducer\";\r\nimport {RootState} from \"../../store/store\";\r\nimport {projectType, userType} from \"../../types/types\";\r\nimport ListOfProjects from \"./ListOfProjects\";\r\n\r\ntype MapDispatchPropsType = {\r\n    setCurrentProjectId: (payload: { currentProject: number | null}) => void\r\n    addNewUserToProject: (payload: {users: Array<userType>, projectId: number}) => void\r\n    addProjectInArrayOfUsers: (payload: {users: Array<number>, projectId: number}) => void\r\n}\r\ntype MapStatePropsType = {\r\n    currentUser: userType\r\n    currentProjectId: number | null\r\n    projectsForUser: Array<projectType>\r\n    users: Array<userType>\r\n}\r\nexport type PropsListOfProjectsType = MapDispatchPropsType & MapStatePropsType\r\n\r\nlet mapStateToProps = (state:RootState): MapStatePropsType => {\r\n    return {\r\n        currentUser: state.users.currentUser,\r\n        currentProjectId: state.projects.currentProjectId,\r\n        projectsForUser: ProjectsForUserSelector(state.projects.projects, state.users.currentUser.id),\r\n        users: state.users.users\r\n    }\r\n}\r\n//<TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, {}, RootState> (mapStateToProps,\r\n    {setCurrentProjectId, addNewUserToProject, addProjectInArrayOfUsers})(ListOfProjects)","import React from \"react\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport ScheduleIcon from '@material-ui/icons/Schedule';\r\n\r\ntype PriorityPropsType = {\r\n    priority: number\r\n}\r\n\r\nconst Priority: React.FC<PriorityPropsType> = function (props:PriorityPropsType) {\r\n    return (\r\n        <Box display={'flex'} justifyContent=\"space-between\" ml={1}>\r\n            <Badge badgeContent={props.priority} color={props.priority > 6 ? 'error' : 'primary'}>\r\n                <ScheduleIcon color={'primary'}/>\r\n            </Badge>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default Priority;\r\n","import React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    description: {\r\n        maxHeight: 100,\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis'\r\n    }\r\n}));\r\n\r\ntype DescriptionPropsType = {\r\n    description: string\r\n    setIsOpenMoreInformation: (arg: boolean) => void\r\n}\r\n\r\nconst Description: React.FC<DescriptionPropsType> = function (props: DescriptionPropsType) {\r\n\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Box>\r\n            <Typography variant=\"body2\" component=\"p\" align={'left'} className={classes.description}>\r\n                {props.description}\r\n            </Typography>\r\n            <Box display={'box'}>\r\n                <Button onClick={() => props.setIsOpenMoreInformation(true)} size={'small'}>{'... learn more'}</Button>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default Description;\r\n","import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {Accordion, AccordionDetails, List, ListItemText} from \"@material-ui/core\";\r\nimport {AccordionSummary} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport {userType} from \"../../../../types/types\";\r\n\r\ntype WorkersAccordionPropsType =  {\r\n    creator: userType | null\r\n    developer: userType | null\r\n    tester: userType | null\r\n}\r\n\r\nconst WorkersAccordion: React.FC<WorkersAccordionPropsType> = function (props: WorkersAccordionPropsType) {\r\n    return (\r\n                    <Accordion>\r\n                        <AccordionSummary\r\n                            expandIcon={<ExpandMoreIcon/>}\r\n                            aria-controls=\"panel1a-content\"\r\n                            id=\"panel1a-header\"\r\n                        >\r\n                            <Typography>Current workers</Typography>\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <List>\r\n                                <ListItemText\r\n                                    primary={`${props.creator?.name} ${props.creator?.surname}`}\r\n                                    secondary={'creator'}\r\n                                />\r\n                                {props.developer && <ListItemText\r\n                                    primary={`${props.developer?.name} ${props.developer?.surname}`}\r\n                                    secondary={'developer'}\r\n                                />}\r\n                                {props.tester && <ListItemText\r\n                                    primary={`${props.tester?.name} ${props.tester?.surname}`}\r\n                                    secondary={'tester'}\r\n                                />}\r\n                            </List>\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n    );\r\n}\r\n\r\nexport default WorkersAccordion;\r\n","import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {Accordion, AccordionDetails, List, ListItemText} from \"@material-ui/core\";\r\nimport {AccordionSummary} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport {userType} from \"../../../../types/types\";\r\n\r\ntype WorkersAccordionPropsType =  {\r\n    description: string\r\n}\r\n\r\nconst DescriptionAccordion: React.FC<WorkersAccordionPropsType> = function (props: WorkersAccordionPropsType) {\r\n    return (\r\n                    <Accordion>\r\n                        <AccordionSummary\r\n                            expandIcon={<ExpandMoreIcon/>}\r\n                            aria-controls=\"panel1a-content\"\r\n                            id=\"panel1a-header\"\r\n                        >\r\n                            <Typography>Description</Typography>\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            {props.description}\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n    );\r\n}\r\n\r\nexport default DescriptionAccordion;\r\n","import React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport {Chip} from \"@material-ui/core\";\r\nimport Priority from \"./Priority\";\r\n\r\n\r\ntype TitleForDialogPropsType = {\r\n    name: string\r\n    priority: number\r\n    status: 'newTask' | 'development' | 'testing' | 'ready'\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    title: {\r\n        display: 'flex',\r\n        justifyContent: \"space-between\",\r\n        alignItems: \"center\"\r\n    },\r\n    subTitle: {\r\n        display: 'flex',\r\n        alignItems: \"center\",\r\n        marginRight: 50\r\n    },\r\n}));\r\n\r\nconst TitleForDialog: React.FC<TitleForDialogPropsType> = function (props: TitleForDialogPropsType) {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n                <Box className={classes.title}>\r\n                    <Box className={classes.subTitle}>\r\n                        <Typography color={'primary'} variant={\"h6\"}>{props.name}</Typography>\r\n                        <Priority priority={props.priority}/>\r\n                    </Box>\r\n                    <Chip label={props.status} color=\"primary\"/>\r\n                </Box>\r\n    );\r\n}\r\n\r\nexport default TitleForDialog;\r\n","import React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport {taskType} from \"../../../types/types\";\r\nimport {Accordion, AccordionDetails, Chip, List, ListItemText} from \"@material-ui/core\";\r\nimport {ListItem} from \"@material-ui/core\";\r\nimport {AccordionSummary} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport WorkersAccordion from \"./Subcomponents/WorkersAccordion\";\r\nimport green from \"@material-ui/core/colors/green\";\r\nimport Priority from \"./Subcomponents/Priority\";\r\nimport DescriptionAccordion from \"./Subcomponents/DescriptionAccordion\";\r\nimport TitleForDialog from \"./Subcomponents/TitleForDialogOfTask\";\r\n\r\ntype AllInformationTaskPropsType = taskType & {\r\n    setIsOpenMoreInformation: (arg: boolean) => void\r\n    isOpenMoreInformation: boolean\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    title: {\r\n        display: 'flex',\r\n        justifyContent: \"space-between\",\r\n        alignItems: \"center\"\r\n    },\r\n    subTitle: {\r\n        display: 'flex',\r\n        alignItems: \"center\"\r\n    },\r\n}));\r\n\r\nconst AllInformationOfTask: React.FC<AllInformationTaskPropsType> = function (props: AllInformationTaskPropsType) {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Dialog\r\n            open={props.isOpenMoreInformation}\r\n            onClose={() => props.setIsOpenMoreInformation(false)}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n               <TitleForDialog name={props.name} status={props.status} priority={props.priority}/>\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <WorkersAccordion creator={props.creator} developer={props.developer} tester={props.tester}/>\r\n                <DescriptionAccordion description={props.description}/>\r\n            </DialogContent>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default AllInformationOfTask;\r\n","import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Priority from \"./Subcomponents/Priority\";\r\nimport Description from \"./Subcomponents/Description\";\r\nimport AllInformationOfTask from \"./AllInformationTask\";\r\nimport {taskType} from \"../../../types/types\";\r\nimport CommunicationWindow from \"./CommunicationWindow\";\r\n\r\nconst TaskContent: React.FC<taskType> = function (props: taskType) {\r\n\r\n    const [isOpenMoreInformation, setIsOpenMoreInformation] = React.useState(false);\r\n\r\n    return (\r\n        <CardContent>\r\n            <Box display={'flex'} justifyContent={'space-between'} alignContent={'center'}>\r\n                <Typography variant=\"h6\" component=\"h2\" display=\"inline\">{props.name}</Typography>\r\n                <Priority priority={props.priority}/>\r\n            </Box>\r\n            <Divider variant=\"middle\"/>\r\n            <Description description={props.description} setIsOpenMoreInformation={setIsOpenMoreInformation}/>\r\n            <AllInformationOfTask isOpenMoreInformation={isOpenMoreInformation}\r\n                                  setIsOpenMoreInformation={setIsOpenMoreInformation}\r\n                                  {...props}/>\r\n        </CardContent>\r\n    );\r\n}\r\n\r\nexport default TaskContent;\r\n","import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {createStyles, Paper} from \"@material-ui/core\";\r\nimport {messageType} from \"../../../../types/types\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        message: {\r\n            maxWidth: '20vw',\r\n            minWidth: 250\r\n        },\r\n    })\r\n);\r\n\r\nconst Message: React.FC<messageType> = function (props: messageType) {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n                <div className={classes.message}>\r\n                    <Typography variant={'subtitle2'} color={'primary'} gutterBottom={true}>\r\n                        {`${props.author.name} ${props.author.surname} (${props.author.position})`}\r\n                    </Typography>\r\n                    <Typography color={'textPrimary'} variant={'body2'} gutterBottom={true}>\r\n                        {props.message}\r\n                    </Typography>\r\n                </div>\r\n    );\r\n}\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport {messageType} from \"../../../../types/types\";\r\nimport {Box, createStyles} from \"@material-ui/core\";\r\nimport Message from \"./Message\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport { grey, indigo,} from \"@material-ui/core/colors\";\r\nimport { Paper } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        allMessage: {\r\n            paddingLeft: 10,\r\n            paddingRight: 10,\r\n            paddingBottom: 10,\r\n        },\r\n        messageRight: {\r\n            marginLeft: 'auto',\r\n            backgroundColor: indigo[100],\r\n            padding: 5,\r\n            marginTop: 10,\r\n        },\r\n        messageLeft: {\r\n            marginRight: 'auto',\r\n            backgroundColor: grey[100],\r\n            padding: 5,\r\n            marginTop: 10,\r\n        },\r\n    })\r\n);\r\n\r\ntype AllMessagePropsType = {\r\n    messages: Array<messageType>\r\n    currentUserId: number\r\n}\r\n\r\nconst AllMessage: React.FC<AllMessagePropsType> = function (props: AllMessagePropsType) {\r\n\r\n    const classes = useStyles()\r\n\r\n    const messages = props.messages.map((el, index) =>\r\n        <Paper key={el.id} className={el.author.id === props.currentUserId? classes.messageRight : classes.messageLeft}>\r\n            <Message {...el}/>\r\n        </Paper>)\r\n\r\n    return (\r\n        <Box className={classes.allMessage} display={'flex'} flexDirection=\"column\">\r\n            {messages}\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default AllMessage;\r\n","import React, {useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport {taskType, userType} from \"../../../types/types\";\r\nimport {ButtonGroup, Chip, IconButton, OutlinedInput}\r\n    from \"@material-ui/core\";\r\nimport Priority from \"./Subcomponents/Priority\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { InputAdornment } from \"@material-ui/core\";\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport WorkersAccordion from \"./Subcomponents/WorkersAccordion\";\r\nimport TitleForDialog from \"./Subcomponents/TitleForDialogOfTask\";\r\nimport AllMessage from \"./Subcomponents/AllMessage\";\r\n\r\n\r\ntype AllInformationTaskPropsType = taskType & {\r\n    setIsOpenMessages: (arg: boolean) => void\r\n    isOpenMessages: boolean\r\n    currentUser: userType\r\n    sendMessage: (payload: { taskId: number, message: string, author: userType }) => void\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    dialogContent: {\r\n        overflow: \"hidden\",\r\n        overflowY: 'hidden',\r\n    },\r\n    placeForMessages: {\r\n        minHeight: 165,\r\n        maxHeight: 400,\r\n        marginTop: 10,\r\n        marginBottom: 10,\r\n        overflowY: 'auto'\r\n    },\r\n    inputMessage: {\r\n        marginBottom: 5,\r\n    }\r\n}));\r\n\r\nconst CommunicationWindow: React.FC<AllInformationTaskPropsType> = function (props: AllInformationTaskPropsType) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [currentMessage, setCurrentMessage] = useState(\"\")\r\n\r\n    const send: ()=> void = () => {\r\n        props.sendMessage({taskId: props.id, message: currentMessage, author: props.currentUser})\r\n        setCurrentMessage('')\r\n    }\r\n\r\n    return (\r\n        <Dialog\r\n            fullWidth={true}\r\n            open={props.isOpenMessages}\r\n            onClose={() => props.setIsOpenMessages(false)}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <TitleForDialog name={props.name} priority={props.priority} status={props.status}/>\r\n            </DialogTitle>\r\n            <DialogContent className={classes.dialogContent}>\r\n                <WorkersAccordion creator={props.creator} developer={props.developer} tester={props.tester}/>\r\n                <Paper elevation={3} className={classes.placeForMessages}>\r\n                    <AllMessage messages={props.communication} currentUserId={props.currentUser.id}/>\r\n                </Paper>\r\n                    <OutlinedInput\r\n                        /*onKeyDown={event => event.keyCode === 13 && send()}*/\r\n                        multiline={true}\r\n                        maxRows={5}\r\n                        placeholder={'enter message...'}\r\n                        fullWidth={true}\r\n                        className={classes.inputMessage}\r\n                        onChange={(event) => setCurrentMessage(event.target.value)}\r\n                        value={currentMessage}\r\n                        endAdornment={\r\n                            <InputAdornment position=\"end\" defaultValue={currentMessage}>\r\n                                <IconButton onClick={send}>\r\n                                    <SendIcon color={'primary'}/>\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        }\r\n                    />\r\n            </DialogContent>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default CommunicationWindow;\r\n","import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport TaskContent from \"./AuxiliaryComponents/TaskContent\";\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport {taskType, userType} from \"../../types/types\";\r\nimport {Badge, createStyles, IconButton, LinearProgress} from \"@material-ui/core\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport MessageOutlinedIcon from '@material-ui/icons/MessageOutlined';\r\nimport CommunicationWindow from \"./AuxiliaryComponents/CommunicationWindow\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            marginTop: 'auto'\r\n        },\r\n    })\r\n);\r\n\r\n\r\ntype PropsType = {\r\n    task: taskType\r\n    currentUser: userType\r\n    takeTaskForReview: (payload: { tester: userType, taskId: number }) => void\r\n    giveTaskForReview: (payload: { taskId: number }) => void\r\n    sendMessage: (payload: { taskId: number, message: string, author: userType }) => void\r\n    unreadMessagesLength: number\r\n    readAllMessageInTask: (payload: {taskId: number, userId: number}) => void\r\n}\r\n\r\nconst RunningTask: React.FC<PropsType> = function (props: PropsType) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [isOpenMessages, setIsOpenMessages] = React.useState(false);\r\n\r\n    return (\r\n        <Card>\r\n            <TaskContent {...props.task}/>\r\n            <Box display={'flex'} justifyContent=\"space-between\" alignContent={'center'} m={1}>\r\n                {/*кнопка вызова окна сообщений*/}\r\n                {(props.currentUser.id === props.task.developer?.id ||\r\n                    props.currentUser.id === props.task.tester?.id ||\r\n                    props.currentUser.id === props.task.creator?.id)\r\n                &&\r\n                <Button onClick={() => {\r\n                    setIsOpenMessages(true)\r\n                    props.readAllMessageInTask({taskId: props.task.id, userId: props.currentUser.id})\r\n                }}>\r\n                    <Badge badgeContent={props.unreadMessagesLength} color={\"error\"}>\r\n                        {<MessageOutlinedIcon color={'primary'}/>}\r\n                    </Badge>\r\n                </Button>\r\n                }\r\n                {/*кнопка подтверждения что задача готова к проверке*/}\r\n                {(props.currentUser.id === props.task.developer?.id && !props.task.forReview)\r\n                && <Button color={'primary'}\r\n                           onClick={() => props.giveTaskForReview({taskId: props.task.id})}\r\n                           endIcon={<ExitToAppIcon/>}\r\n                           size=\"medium\">ready for review</Button>\r\n                }\r\n                {/*кнопка для взятия задачи на проверку (разработчик не может брать свою задачу на проверку)*/}\r\n                {(props.currentUser.id !== props.task.developer?.id && props.task.forReview && props.currentUser.accesses.includes(2))\r\n                && <Button color={'primary'}\r\n                           onClick={() => props.takeTaskForReview({\r\n                               tester: props.currentUser,\r\n                               taskId: props.task.id\r\n                           })}\r\n                           endIcon={<ExitToAppIcon/>}\r\n                           size=\"medium\">submit for verification</Button>\r\n                }\r\n                {(props.currentUser.id !== props.task.developer?.id && !props.task.forReview)\r\n                && <div className={classes.root}><LinearProgress/></div>\r\n                }\r\n                <CommunicationWindow sendMessage={props.sendMessage} currentUser={props.currentUser}\r\n                                     isOpenMessages={isOpenMessages}\r\n                                     setIsOpenMessages={setIsOpenMessages}\r\n                                     {...props.task}/>\r\n            </Box>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default RunningTask;\r\n","import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport TaskContent from \"./AuxiliaryComponents/TaskContent\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport RateReviewOutlinedIcon from '@material-ui/icons/RateReviewOutlined';\r\nimport ThumbUpAltOutlinedIcon from '@material-ui/icons/ThumbUpAltOutlined';\r\nimport {taskType, userType} from \"../../types/types\";\r\nimport MessageOutlinedIcon from \"@material-ui/icons/MessageOutlined\";\r\nimport CommunicationWindow from \"./AuxiliaryComponents/CommunicationWindow\";\r\nimport {Badge} from \"@material-ui/core\";\r\n\r\ntype PropsType = {\r\n    task: taskType\r\n    currentUser: userType\r\n    approveTask: (payload: { taskId: number }) => void\r\n    sendMessage: (payload: { taskId: number, message: string, author: userType }) => void\r\n    takeTaskForRevision: (payload: { taskId: number }) => void\r\n    unreadMessagesLength: number\r\n    readAllMessageInTask: (payload: { taskId: number, userId: number }) => void\r\n}\r\n\r\nconst ReviewTask: React.FC<PropsType> = function (props: PropsType) {\r\n\r\n    const [isOpenMessages, setIsOpenMessages] = React.useState(false);\r\n\r\n    return (\r\n        <Card>\r\n            <TaskContent {...props.task}\r\n            />\r\n            <Box display={'flex'} justifyContent=\"space-between\" m={1}>\r\n                <ButtonGroup variant=\"text\" color=\"primary\" aria-label=\"text primary button group\">\r\n                    {/*кнопка вызова окна сообщений*/}\r\n                    {(props.currentUser.id === props.task.developer?.id ||\r\n                        props.currentUser.id === props.task.tester?.id ||\r\n                        props.currentUser.id === props.task.creator?.id)\r\n                    &&\r\n                    <Button onClick={() => {\r\n                        setIsOpenMessages(true)\r\n                        props.readAllMessageInTask({taskId: props.task.id, userId: props.currentUser.id})\r\n                    }}>\r\n                        <Badge badgeContent={props.unreadMessagesLength} color={\"error\"}>\r\n                            {<MessageOutlinedIcon color={'primary'}/>}\r\n                        </Badge>\r\n                    </Button>\r\n                    }\r\n                    {/*кнопка отправки задачи на доработку*/}\r\n                    {props.task.tester?.id === props.currentUser.id\r\n                    && <Button color={'secondary'} onClick={() => props.takeTaskForRevision({taskId: props.task.id})}\r\n                               endIcon={<RateReviewOutlinedIcon/>}\r\n                               size=\"medium\">revision</Button>\r\n                    }\r\n                    {/*кнопка одобрения задачи*/}\r\n                    {props.task.tester?.id === props.currentUser.id\r\n                    && <Button color={'primary'}\r\n                               onClick={() => props.approveTask({taskId: props.task.id})}\r\n                               endIcon={<ThumbUpAltOutlinedIcon/>}\r\n                               size=\"medium\">approve</Button>\r\n                    }\r\n                    <CommunicationWindow sendMessage={props.sendMessage} currentUser={props.currentUser}\r\n                                         isOpenMessages={isOpenMessages}\r\n                                         setIsOpenMessages={setIsOpenMessages}\r\n                                         {...props.task}/>\r\n                </ButtonGroup>\r\n            </Box>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default ReviewTask;\r\n","import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport LibraryAddOutlinedIcon from '@material-ui/icons/LibraryAddOutlined';\r\nimport TaskContent from \"./AuxiliaryComponents/TaskContent\";\r\nimport {taskType, userType} from \"../../types/types\";\r\n\r\ntype PropsType ={\r\n    task: taskType\r\n    currentUser: userType\r\n    takeTaskForDevelopment: (payload: {developer: userType, taskId: number}) => void\r\n}\r\n\r\n\r\nconst CurrentTask: React.FC<PropsType> = function (props:PropsType ) {\r\n\r\n    return (\r\n        <Card>\r\n            <TaskContent {...props.task}/>\r\n            <Box display={'flex'} justifyContent=\"flex-end\" m={1}>\r\n                {props.currentUser.accesses.includes(1) &&\r\n                <Button color='primary'\r\n                        onClick={() => props.takeTaskForDevelopment({developer: props.currentUser, taskId: props.task.id})}\r\n                        endIcon={<LibraryAddOutlinedIcon/>}\r\n                        size=\"medium\">take a task</Button>\r\n                }\r\n            </Box>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default CurrentTask;\r\n","import React from \"react\";\r\nimport {PropsListOfTasksType} from \"../ListOfTasksContainer\";\r\nimport RunningTask from \"../../Task/RunningTask\";\r\nimport ReviewTask from \"../../Task/ReviewTask\";\r\nimport CurrentTask from \"../../Task/CurrentTask\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {unreadMessagesForTaskSelector} from \"../../../utils/selectors/currentProject-selector\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        margin: 10,\r\n    },\r\n}));\r\n\r\ntype AvailableTasksPropsType = PropsListOfTasksType & {\r\n    value: number\r\n    index: number\r\n}\r\n\r\nconst AvailableTasks: React.FC<AvailableTasksPropsType> = function (props: AvailableTasksPropsType) {\r\n\r\n    const classes = useStyles()\r\n\r\n    const tasks = props.tasksOfUser.map(el => {\r\n            if (el.status === 'development') {\r\n                return <Grid item xs={12} md={6}><RunningTask task={el} currentUser={props.currentUser}\r\n                                                              takeTaskForReview={props.takeTaskForReview}\r\n                                                              giveTaskForReview={props.giveTaskForReview}\r\n                                                              sendMessage={props.sendMessage}\r\n                                                              unreadMessagesLength={unreadMessagesForTaskSelector(el, props.currentUser.id)}\r\n                                                              readAllMessageInTask={props.readAllMessageInTask}\r\n                /></Grid>\r\n            } else if (el.status === 'testing') {\r\n                return <Grid item xs={12} md={6}><ReviewTask task={el} currentUser={props.currentUser}\r\n                                                             approveTask={props.approveTask}\r\n                                                             sendMessage={props.sendMessage}\r\n                                                             takeTaskForRevision={props.takeTaskForRevision}\r\n                                                             unreadMessagesLength={unreadMessagesForTaskSelector(el, props.currentUser.id)}\r\n                                                             readAllMessageInTask={props.readAllMessageInTask}/></Grid>\r\n            } else if (el.status === 'newTask') {\r\n                return <Grid item xs={12} md={6}><CurrentTask task={el} currentUser={props.currentUser}\r\n                                                              takeTaskForDevelopment={props.takeTaskForDevelopment}/></Grid>\r\n            } else {\r\n                return null\r\n            }\r\n        }\r\n    )\r\n\r\n    return (\r\n        <div hidden={props.value !== props.index} className={classes.container}>\r\n            {props.value === props.index && (\r\n                <Grid container spacing={2}>\r\n                    {tasks}\r\n                </Grid>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AvailableTasks;","import React from \"react\";\r\nimport {PropsListOfTasksType} from \"../ListOfTasksContainer\";\r\nimport RunningTask from \"../../Task/RunningTask\";\r\nimport CurrentTask from \"../../Task/CurrentTask\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {unreadMessagesForTaskSelector} from \"../../../utils/selectors/currentProject-selector\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        margin: 10,\r\n    },\r\n}));\r\n\r\ntype AvailableTasksPropsType = PropsListOfTasksType & {\r\n    value: number\r\n    index: number\r\n}\r\n\r\nconst ReadyTasks: React.FC<AvailableTasksPropsType> = function ({currentUser, ...props}: AvailableTasksPropsType) {\r\n\r\n    const classes = useStyles()\r\n\r\n    const tasks = props.userAccessibleTasks.map(el => {\r\n\r\n        // accesses см. users-reducer\r\n        if (currentUser.accesses.includes(1) && currentUser.accesses.includes(2) && el.forReview) {\r\n            return (\r\n                <Grid item xs={12} md={6}><RunningTask currentUser={currentUser}\r\n                                                       task={el}\r\n                                                       takeTaskForReview={props.takeTaskForReview}\r\n                                                       giveTaskForReview={props.giveTaskForReview}\r\n                                                       sendMessage={props.sendMessage}\r\n                                                       unreadMessagesLength={unreadMessagesForTaskSelector(el, currentUser.id)}\r\n                                                       readAllMessageInTask={props.readAllMessageInTask}\r\n                /></Grid>)\r\n        } else if (currentUser.accesses.includes(1) && currentUser.accesses.includes(2) && el.status === 'newTask') {\r\n            return (\r\n                <Grid item xs={12} md={6}><CurrentTask currentUser={currentUser}\r\n                                                       task={el}\r\n                                                       takeTaskForDevelopment={props.takeTaskForDevelopment}/></Grid>)\r\n        } else if (currentUser.accesses.includes(1)) {\r\n            return (\r\n                <Grid item xs={12} md={6}><CurrentTask currentUser={currentUser}\r\n                                                       task={el}\r\n                                                       takeTaskForDevelopment={props.takeTaskForDevelopment}/></Grid>)\r\n        } else if (currentUser.accesses.includes(2)) {\r\n            return (\r\n                <Grid item xs={12} md={6}><RunningTask currentUser={currentUser}\r\n                                                       task={el}\r\n                                                       takeTaskForReview={props.takeTaskForReview}\r\n                                                       giveTaskForReview={props.giveTaskForReview}\r\n                                                       sendMessage={props.sendMessage}\r\n                                                       unreadMessagesLength={unreadMessagesForTaskSelector(el, currentUser.id)}\r\n                                                       readAllMessageInTask={props.readAllMessageInTask}\r\n                /></Grid>)\r\n        }\r\n\r\n            /*if (props.currentUser.accessLevel === 1) {\r\n                return (\r\n                    <Grid item xs={12} md={6}><CurrentTask currentUser={props.currentUser}\r\n                                                           task={el}\r\n                                                           takeTaskForDevelopment={props.takeTaskForDevelopment}/></Grid>)\r\n            } else if (props.currentUser.accessLevel === 2) {\r\n                return (\r\n                    <Grid item xs={12} md={6}><RunningTask currentUser={props.currentUser}\r\n                                                           task={el}\r\n                                                           takeTaskForReview={props.takeTaskForReview}\r\n                                                           giveTaskForReview={props.giveTaskForReview}\r\n                                                           sendMessage={props.sendMessage}\r\n                    /></Grid>)\r\n            } else if (props.currentUser.accessLevel === 3 && el.forReview) {\r\n                return (\r\n                    <Grid item xs={12} md={6}><RunningTask currentUser={props.currentUser}\r\n                                                           task={el}\r\n                                                           takeTaskForReview={props.takeTaskForReview}\r\n                                                           giveTaskForReview={props.giveTaskForReview}\r\n                                                           sendMessage={props.sendMessage}\r\n                    /></Grid>)\r\n            } else if (props.currentUser.accessLevel === 3 && el.status === 'newTask') {\r\n                return (\r\n                    <Grid item xs={12} md={6}><CurrentTask currentUser={props.currentUser}\r\n                                                           task={el}\r\n                                                           takeTaskForDevelopment={props.takeTaskForDevelopment}/></Grid>)\r\n            }*/\r\n        }\r\n    )\r\n\r\n    return (\r\n        <div hidden={props.value !== props.index} className={classes.container}>\r\n            {props.value === props.index && (\r\n                <Grid container spacing={2}>\r\n                    {tasks}\r\n                </Grid>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReadyTasks;","import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport TaskContent from \"./AuxiliaryComponents/TaskContent\";\r\nimport CheckCircleOutlineOutlinedIcon from '@material-ui/icons/CheckCircleOutlineOutlined';\r\nimport green from \"@material-ui/core/colors/green\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport {taskType, userType} from \"../../types/types\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport MessageOutlinedIcon from \"@material-ui/icons/MessageOutlined\";\r\nimport CommunicationWindow from \"./AuxiliaryComponents/CommunicationWindow\";\r\nimport {Badge} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    icon: {\r\n        color: green[500],\r\n    },\r\n}));\r\n\r\ntype PropsType = {\r\n    task: taskType\r\n    currentUser: userType\r\n    sendMessage: (payload: { taskId: number, message: string, author: userType }) => void\r\n    unreadMessagesLength: number\r\n    readAllMessageInTask: (payload: { taskId: number, userId: number }) => void\r\n}\r\n\r\nconst CompletedTask: React.FC<PropsType> = function (props: PropsType) {\r\n    const classes = useStyles();\r\n\r\n    const [isOpenMessages, setIsOpenMessages] = React.useState(false);\r\n\r\n    return (\r\n        <Card>\r\n            <TaskContent {...props.task}\r\n            />\r\n            <Box display={'flex'} justifyContent=\"space-between\" m={1}>\r\n                {(props.currentUser.id === props.task.developer?.id ||\r\n                    props.currentUser.id === props.task.tester?.id ||\r\n                    props.currentUser.id === props.task.creator?.id)\r\n                &&\r\n                <Badge badgeContent={props.unreadMessagesLength} color={\"error\"}>\r\n                    <Button onClick={() => {\r\n                        setIsOpenMessages(true)\r\n                        props.readAllMessageInTask({taskId: props.task.id, userId: props.currentUser.id})\r\n                    }}>\r\n                        {<MessageOutlinedIcon color={'primary'}/>}\r\n                    </Button>\r\n                </Badge>\r\n                }\r\n                <CheckCircleOutlineOutlinedIcon fontSize={'large'} className={classes.icon}/>\r\n                <CommunicationWindow sendMessage={props.sendMessage} currentUser={props.currentUser}\r\n                                     isOpenMessages={isOpenMessages}\r\n                                     setIsOpenMessages={setIsOpenMessages}\r\n                                     {...props.task}/>\r\n            </Box>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default CompletedTask;\r\n","import React from \"react\";\r\nimport {PropsListOfTasksType} from \"../ListOfTasksContainer\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport CompletedTask from \"../../Task/CompletedTask\";\r\nimport {unreadMessagesForTaskSelector} from \"../../../utils/selectors/currentProject-selector\";\r\nimport RunningTask from \"../../Task/RunningTask\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        margin: 10,\r\n    },\r\n}));\r\n\r\ntype AvailableTasksPropsType = PropsListOfTasksType & {\r\n    value: number\r\n    index: number\r\n}\r\n\r\nconst ReadyTasks: React.FC<AvailableTasksPropsType> = function (props: AvailableTasksPropsType) {\r\n\r\n    const classes = useStyles()\r\n\r\n    const readyTasks = props.tasksOfUser.map(el => {\r\n            if (el.status === 'ready') {\r\n                return (\r\n                    <Grid item xs={12} md={6}><CompletedTask task={el} currentUser={props.currentUser}\r\n                                                             sendMessage={props.sendMessage}\r\n                                                             unreadMessagesLength={unreadMessagesForTaskSelector(el, props.currentUser.id)}\r\n                                                             readAllMessageInTask={props.readAllMessageInTask}\r\n                    /></Grid>)\r\n            }\r\n        }\r\n    )\r\n\r\n    return (\r\n        <div hidden={props.value !== props.index} className={classes.container}>\r\n            {props.value === props.index && (\r\n                <Grid container spacing={2}>\r\n                    {readyTasks}\r\n                </Grid>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReadyTasks;","import React from \"react\";\r\nimport {PropsListOfTasksType} from \"../ListOfTasksContainer\";\r\nimport RunningTask from \"../../Task/RunningTask\";\r\nimport ReviewTask from \"../../Task/ReviewTask\";\r\nimport CurrentTask from \"../../Task/CurrentTask\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {unreadMessagesForTaskSelector} from \"../../../utils/selectors/currentProject-selector\";\r\nimport CompletedTask from \"../../Task/CompletedTask\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        margin: 10,\r\n    },\r\n}));\r\n\r\ntype AvailableTasksPropsType = PropsListOfTasksType & {\r\n    value: number\r\n    index: number\r\n}\r\n\r\nconst CreatedTasks: React.FC<AvailableTasksPropsType> = function (props: AvailableTasksPropsType) {\r\n\r\n    const classes = useStyles()\r\n\r\n    const tasks = props.tasksCreatedByTheUser.map(el => {\r\n            if (el.status === 'development') {\r\n                return <Grid item xs={12} md={6}><RunningTask task={el} currentUser={props.currentUser}\r\n                                                              takeTaskForReview={props.takeTaskForReview}\r\n                                                              giveTaskForReview={props.giveTaskForReview}\r\n                                                              sendMessage={props.sendMessage}\r\n                                                              unreadMessagesLength={unreadMessagesForTaskSelector(el, props.currentUser.id)}\r\n                                                              readAllMessageInTask={props.readAllMessageInTask}\r\n                /></Grid>\r\n            } else if (el.status === 'testing') {\r\n                return <Grid item xs={12} md={6}><ReviewTask task={el} currentUser={props.currentUser}\r\n                                                             approveTask={props.approveTask}\r\n                                                             sendMessage={props.sendMessage}\r\n                                                             takeTaskForRevision={props.takeTaskForRevision}\r\n                                                             unreadMessagesLength={unreadMessagesForTaskSelector(el, props.currentUser.id)}\r\n                                                             readAllMessageInTask={props.readAllMessageInTask}/></Grid>\r\n            } else if (el.status === 'newTask') {\r\n                return <Grid item xs={12} md={6}><CurrentTask task={el} currentUser={props.currentUser}\r\n                                                              takeTaskForDevelopment={props.takeTaskForDevelopment}/></Grid>\r\n            } else if (el.status === 'ready') {\r\n                return (\r\n                    <Grid item xs={12} md={6}><CompletedTask task={el} currentUser={props.currentUser}\r\n                                                             sendMessage={props.sendMessage}\r\n                                                             unreadMessagesLength={unreadMessagesForTaskSelector(el, props.currentUser.id)}\r\n                                                             readAllMessageInTask={props.readAllMessageInTask}\r\n                    /></Grid>)\r\n            } else {\r\n                return null\r\n            }\r\n        }\r\n    )\r\n\r\n    return (\r\n        <div hidden={props.value !== props.index} className={classes.container}>\r\n            {props.value === props.index && (\r\n                <Grid container spacing={2}>\r\n                    {tasks}\r\n                </Grid>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreatedTasks;","import React from \"react\";\r\nimport {AppBar, Badge, Container, Paper, Tab, Tabs, Typography} from \"@material-ui/core\";\r\nimport {PropsListOfTasksType} from \"./ListOfTasksContainer\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport AvailableTasks from \"./AuxiliaryComponents/AvailableTasks\";\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport CurrentTasks from \"./AuxiliaryComponents/CurrentTasks\";\r\nimport ReadyTasks from \"./AuxiliaryComponents/ReadyTasks\";\r\nimport MessageOutlinedIcon from \"@material-ui/icons/MessageOutlined\";\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport CreatedTasks from \"./AuxiliaryComponents/CreatedTasks\";\r\nimport CustomTab from \"./AuxiliaryComponents/CustomTab\";\r\nimport {unreadMessagesForProjectSelector} from \"../../utils/selectors/currentProject-selector\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        margin: 10,\r\n    },\r\n}));\r\n\r\nconst ListOfTasks: React.FC<PropsListOfTasksType> = function (props: PropsListOfTasksType) {\r\n\r\n    // переменная необходимая для переключения между типами задач см. документацию material.ui\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n        setValue(newValue);\r\n    };\r\n    const handleChangeIndex = (index: number) => {\r\n        setValue(index);\r\n    };\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Container className={classes.container}>\r\n            {props.currentUser.projects.length === 0 ?\r\n                <Typography variant={'h6'} color={'primary'}>\r\n                    to display available tasks select the current project in the projects section\r\n                </Typography> :\r\n                <div>\r\n                    <AppBar position=\"static\" color=\"default\">\r\n                        <Tabs\r\n                            value={value}\r\n                            onChange={handleChange}\r\n                            indicatorColor=\"primary\"\r\n                            textColor=\"primary\"\r\n                            variant=\"fullWidth\"\r\n                            aria-label=\"full width tabs example\"\r\n                        >\r\n                            <Tab label={`New available tasks (${props.userAccessibleTasks.length})`}/>\r\n                            <Tab icon={<Badge color=\"error\" variant={\"dot\"}\r\n                                              badgeContent={unreadMessagesForProjectSelector(\r\n                                                  {tasks: props.tasksOfUser.filter(el => el.status !== 'ready')},\r\n                                                  props.currentUser.id)}>\r\n                                {`Current tasks (${props.tasksOfUser.filter(el => el.status !== 'ready').length})`}\r\n                            </Badge>}/>\r\n                            <Tab icon={<Badge color=\"error\" variant={\"dot\"}\r\n                                              badgeContent={unreadMessagesForProjectSelector(\r\n                                                  {tasks: props.tasksOfUser.filter(el => el.status === 'ready')},\r\n                                                  props.currentUser.id)}>\r\n                                {`Completed tasks (${props.tasksOfUser.filter(el => el.status === 'ready').length})`}\r\n                            </Badge>}/>\r\n                            {props.currentUser.accesses.includes(3)\r\n                            &&\r\n                            <Tab icon={<Badge color=\"error\" variant={\"dot\"}\r\n                                              badgeContent={unreadMessagesForProjectSelector({tasks: props.tasksCreatedByTheUser}, props.currentUser.id)}>\r\n                                {`Сreated tasks (${props.tasksCreatedByTheUser.length})`}\r\n                            </Badge>}/>\r\n                            }\r\n                        </Tabs>\r\n                    </AppBar>\r\n                    {/*<Typography variant={'h6'} color={'primary'}>{tasks.length > 0 ?\"Your tasks in current project:\"\r\n                : \"so far you do not have current tasks, to take a task go to the section of the current project\"}</Typography>*/}\r\n                    <SwipeableViews\r\n                        index={value}\r\n                        onChangeIndex={handleChangeIndex}\r\n                    >\r\n                        <CurrentTasks {...props} value={value} index={0}/>\r\n                        <AvailableTasks {...props} value={value} index={1}/>\r\n                        <ReadyTasks {...props} value={value} index={2}/>\r\n                        {props.currentUser.accesses.includes(3) && <CreatedTasks value={value} {...props} index={3}/>}\r\n                    </SwipeableViews>\r\n                </div>}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default ListOfTasks;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {ProjectsForUserSelector,\r\n    tasksCreatedByTheUserSelector, tasksInProjectForUserSelector, userAccessibleTasksSelector} from \"../../utils/selectors/currentProject-selector\";\r\nimport {\r\n    approveTask,\r\n    giveTaskForReview,\r\n    sendMessage,\r\n    setCurrentProjectId,\r\n    readAllMessageInTask,\r\n    takeTaskForDevelopment,\r\n    takeTaskForReview, takeTaskForRevision\r\n} from \"../../store/projects-reducer\";\r\nimport {RootState} from \"../../store/store\";\r\nimport {projectType, taskType, userType} from \"../../types/types\";\r\nimport ListOfTasks from \"./ListOfTasks\";\r\n\r\ntype MapDispatchPropsType = {\r\n    takeTaskForDevelopment: (payload: { developer: userType, taskId: number }) => void\r\n    takeTaskForReview: (payload: { tester: userType, taskId: number }) => void\r\n    giveTaskForReview: (payload: {taskId: number}) => void\r\n    approveTask: (payload: {taskId: number}) => void\r\n    sendMessage: (payload: {taskId: number, author: userType, message: string}) => void\r\n    takeTaskForRevision: (payload: {taskId: number }) => void\r\n    readAllMessageInTask: (payload: {taskId: number, userId: number}) => void\r\n}\r\ntype MapStatePropsType = {\r\n    currentUser: userType\r\n    tasksOfUser: Array<taskType>\r\n    userAccessibleTasks: Array<taskType> | Array<any>\r\n    tasksCreatedByTheUser: Array<taskType> | []\r\n}\r\nexport type PropsListOfTasksType = MapDispatchPropsType & MapStatePropsType\r\n\r\nlet mapStateToProps = (state:RootState): MapStatePropsType => {\r\n    return {\r\n        currentUser: state.users.currentUser,\r\n        tasksOfUser: tasksInProjectForUserSelector(state.projects.projects, state.users.currentUser.id, state.projects.currentProjectId),\r\n        userAccessibleTasks: userAccessibleTasksSelector(state.projects.projects, state.users.currentUser, state.projects.currentProjectId),\r\n        tasksCreatedByTheUser: tasksCreatedByTheUserSelector(state.projects.projects.filter(el => el.id === state.projects.currentProjectId)[0],\r\n            state.users.currentUser.id)\r\n    }\r\n}\r\n//<TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, {}, RootState> (mapStateToProps,\r\n    {takeTaskForDevelopment, takeTaskForReview, giveTaskForReview, readAllMessageInTask,\r\n        approveTask, sendMessage, takeTaskForRevision})(ListOfTasks)","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {FilledInput, Input, Typography} from '@material-ui/core';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport {AddTaskFormType} from \"./AddTaskFormContainer\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        marginTop: 10,\r\n    },\r\n    button: {\r\n        marginLeft: \"auto\"\r\n    }\r\n}));\r\n\r\nconst AddTaskForm: React.FC<AddTaskFormType> = function (props: AddTaskFormType) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const {\r\n        register,\r\n        formState: {errors},\r\n        handleSubmit,\r\n        reset,\r\n    } = useForm({mode: 'onChange'});\r\n\r\n    type formDataType = {\r\n        name: string\r\n        description: string\r\n        priority: number\r\n    }\r\n\r\n    const onSubmit = (formData: formDataType) => {\r\n        props.addNewTaskToProject({\r\n            currentUser: props.currentUser, name: formData.name,\r\n            description: formData.description, priority: formData.priority\r\n        })\r\n        reset();\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant={'h6'} color={'primary'}>\r\n                {`Сreating a task for the project: \"${props.currentProjectName}\"`}\r\n            </Typography>\r\n            {props.currentUser.accesses.includes(3) && props.currentProjectId !== null?\r\n        <form noValidate autoComplete=\"off\" onSubmit={handleSubmit(onSubmit)}>\r\n            <Container className={classes.container}>\r\n                <Grid spacing={2} container>\r\n                    <Grid item xs={8} md={10}><TextField variant={\"outlined\"} fullWidth required\r\n                                                         error={errors.name ? true : false}\r\n                                                         helperText={errors.name ? 'enter task name' : null}\r\n                                                         {...register('name', {required: true})} name={'name'} label=\"name\"/>\r\n                                                         <br/></Grid>\r\n                    <Grid item xs={4} md={2}><TextField variant={\"outlined\"} fullWidth\r\n                                                        required {...register('priority', {required: true, max: 10})}\r\n                                                        error={errors.priority ? true : false} type={'number'}\r\n                                                        helperText={errors.priority ? 'should be a value between 1 and 10' : null}\r\n                                                        name={'priority'} label=\"priority\"/>\r\n                                                        <br/></Grid>\r\n                    <Grid item xs={12}><TextField variant={\"outlined\"} fullWidth\r\n                                                  required {...register('description', {required: true})}\r\n                                                  error={errors.description ? true : false}\r\n                                                  helperText={errors.description ? 'enter task description' : null}\r\n                                                  name={'description'} label=\"description\"/>\r\n                                                  <br/></Grid>\r\n                </Grid>\r\n                <Button className={classes.container} color={'primary'} size={\"large\"} type={'submit'}\r\n                        variant={\"contained\"}>\r\n                    create a new task\r\n                </Button>\r\n            </Container>\r\n        </form> : <Redirect to={'/projects'}/>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddTaskForm;\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {addNewTaskToProject} from '../../store/projects-reducer';\r\nimport {RootState} from \"../../store/store\";\r\nimport {taskType, userType} from \"../../types/types\";\r\nimport AddTaskForm from \"./AddTaskForm\";\r\nimport {currentProjectNameSelector} from \"../../utils/selectors/currentProject-selector\";\r\n\r\ntype MapStateToProps = {\r\n    users: Array<userType>\r\n    currentUser: userType\r\n    currentProjectId: number | null\r\n    currentProjectName: string | null\r\n}\r\ntype MapDispatchToProps = {\r\n    addNewTaskToProject: (payload: {currentUser: userType, name: string, description: string, priority: number}) => void\r\n}\r\nexport type AddTaskFormType = MapStateToProps & MapDispatchToProps;\r\n\r\nlet mapStateToProps = (state: RootState) => {\r\n    return {\r\n        users: state.users.users,\r\n        currentUser: state.users.currentUser,\r\n        currentProjectId: state.projects.currentProjectId,\r\n        currentProjectName: currentProjectNameSelector(state.projects.projects, state.projects.currentProjectId)\r\n    }\r\n}\r\n\r\nexport default connect<MapStateToProps, MapDispatchToProps, {}, RootState>(mapStateToProps,\r\n    {addNewTaskToProject})(AddTaskForm)\r\n","import React from \"react\";\r\nimport {Avatar, Chip, Paper, Typography} from '@material-ui/core';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {AddProjectFormType} from \"./AddProjectFormContainer\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport ListOfUsers from \"./ListOfUsers/ListOfUsers\";\r\nimport {userType} from \"../../types/types\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: 5,\r\n        minHeight: 32,\r\n    },\r\n\r\n}));\r\n\r\ntype selectionOfMultipleUsersPropsType = AddProjectFormType & {\r\n    selectedUsers: Array<userType> | never[]\r\n    setSelectedUsers: (arg0: Array<userType> | never[]) => void\r\n    isError: boolean\r\n}\r\n\r\nconst SelectionOfMultipleUsers: React.FC<selectionOfMultipleUsersPropsType>\r\n    = function ({selectedUsers,setSelectedUsers, isError,...props}: selectionOfMultipleUsersPropsType) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const selectedUsersView = selectedUsers.map(el =>\r\n        <Grid item>\r\n            <Chip\r\n                avatar={<Avatar>{el.name.split('')[0]}{el.surname.split('')[0]}</Avatar>}\r\n                label={`${el.name} ${el.surname} (${el.position})`}\r\n                color=\"primary\"\r\n                clickable\r\n                onDelete={() => setSelectedUsers([...selectedUsers.filter(user => el.id !== user.id)])}\r\n            /></Grid>)\r\n\r\n    return (\r\n        <Grid container spacing={1} direction={'row'} alignItems={\"flex-start\"}>\r\n            <Grid item xs={9} md={10}>\r\n                <Paper className={classes.paper}>\r\n                    {selectedUsers.length === 0 ? <Typography variant={'subtitle1'}\r\n                                                              color={'textSecondary'}\r\n                                                              align={'left'}>select workers for the project *</Typography>\r\n                        : <Grid container spacing={1} direction={'row'}>\r\n                            {selectedUsersView}\r\n                        </Grid>\r\n                    }\r\n                </Paper>\r\n            </Grid>\r\n            <Grid item xs={3} md={2}>\r\n                <ListOfUsers users={props.users}\r\n                             setSelectedUsers={setSelectedUsers}\r\n                             selectedUsers={selectedUsers}/>\r\n            </Grid>\r\n            {isError && <Typography variant={'caption'}\r\n                        color={isError? 'error':'textSecondary'}\r\n                        align={'right'}>select workers for the project (you must be on the list)</Typography>}\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default SelectionOfMultipleUsers;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {Typography} from '@material-ui/core';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport {AddProjectFormType} from \"./AddProjectFormContainer\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport SelectionOfMultipleUsers from \"./SelectionOfMultipleUsers\";\r\nimport {userType} from \"../../types/types\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        marginTop: 20,\r\n    },\r\n    button: {\r\n        marginLeft: \"auto\"\r\n    }\r\n}));\r\n\r\nconst AddProjectForm: React.FC<AddProjectFormType> = function (props: AddProjectFormType) {\r\n\r\n    const classes = useStyles();\r\n\r\n    // массив пользователей которые будут работать над проектом\r\n    const [selectedUsers, setSelectedUsers] = useState<Array<userType>>([props.currentUser])\r\n\r\n    // индикатор что массив пользователей не удовлетворительный (не содержит создателя или пустой)\r\n    const [isError, setIsError] = useState(false)\r\n\r\n    // индикатор того отправлялись данные формы или нет хотя бы один раз\r\n    const [submited, setSubmited] = useState(false)\r\n\r\n    const {\r\n        register,\r\n        formState: {errors},\r\n        handleSubmit,\r\n        reset,\r\n    } = useForm({mode: 'onChange'});\r\n\r\n    // проверяем массив пользователей после каждого его изменения, испровляя в зависимости от этого isError\r\n    useEffect(() => {\r\n        selectedUsers.length === 0 && (submited || !selectedUsers.map(el => el.id).includes(props.currentUser.id))\r\n            ? setIsError(true) : setIsError(false)\r\n    }, [selectedUsers])\r\n\r\n    type formDataType = {\r\n        name: string\r\n    }\r\n\r\n    const onSubmit = (formData: formDataType) => {\r\n        setSubmited(true)\r\n        if (selectedUsers.length === 0 || !selectedUsers.map(el => el.id).includes(props.currentUser.id)) {\r\n            setIsError(true)\r\n        } else {\r\n            props.addNewProject({name: formData.name, developersId: selectedUsers.map(el => el.id)})\r\n            props.addProjectInArrayOfUsers(\r\n                {\r\n                    users: selectedUsers.map(el => el.id),\r\n                    projectId: props.projects[props.projects.length-1].id + 1 //id позже нужно будет лучше ораганизовать\r\n                })\r\n            reset()\r\n            setSelectedUsers([])\r\n            setSubmited(false)\r\n            setIsError(false)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant={'h6'}\r\n                        color={'primary'}>{`Сreating a project`}</Typography>\r\n            {/*проверяем есть ли у пользователя доступ к созданию проектов*/}\r\n            {props.currentUser.accesses.includes(4) ?\r\n                <form noValidate autoComplete=\"off\" onSubmit={handleSubmit(onSubmit)}>\r\n                    <Container className={classes.container}>\r\n                        <Grid spacing={2} container>\r\n                            <Grid item xs={12} md={12}><TextField variant={\"outlined\"} fullWidth required\r\n                                                                  error={errors.name ? true : false}\r\n                                                                  helperText={errors.name ? 'enter task name' : null}\r\n                                                                  {...register('name', {required: true})}\r\n                                                                  name={'name'}\r\n                                                                  label=\"name of project\"/>\r\n                                <br/></Grid>\r\n                            <Grid item xs={12} md={12}>\r\n                                <SelectionOfMultipleUsers {...props} isError={isError} selectedUsers={selectedUsers}\r\n                                                          setSelectedUsers={setSelectedUsers}/>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Button className={classes.container} color={'primary'} size={\"large\"} type={'submit'}\r\n                                variant={\"contained\"}>\r\n                            create a new project\r\n                        </Button>\r\n                    </Container>\r\n                </form> : <Redirect to={'/projects'}/>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddProjectForm;\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {addNewProject, setCurrentProjectId, addNewUserToProject} from '../../store/projects-reducer';\r\nimport {addProjectInArrayOfUsers} from '../../store/users-reducer';\r\nimport {RootState} from \"../../store/store\";\r\nimport {projectType, userType} from \"../../types/types\";\r\nimport {currentProjectNameSelector} from \"../../utils/selectors/currentProject-selector\";\r\nimport AddProjectForm from \"./AddProjectForm\";\r\n\r\ntype MapStateToProps = {\r\n    users: Array<userType>\r\n    currentUser: userType\r\n    currentProjectId: number | null\r\n    currentProjectName: string | null\r\n    projects: Array<projectType>\r\n}\r\ntype MapDispatchToProps = {\r\n    addNewProject: (payload: {name: string, developersId: Array<number>}) => void\r\n    setCurrentProjectId: (payload: {currentProject: number | null}) => void\r\n    addProjectInArrayOfUsers: (payload: {users: Array<number>, projectId: number}) => void\r\n}\r\nexport type AddProjectFormType = MapStateToProps & MapDispatchToProps;\r\n\r\nlet mapStateToProps = (state: RootState) => {\r\n    return {\r\n        users: state.users.users,\r\n        currentUser: state.users.currentUser,\r\n        currentProjectId: state.projects.currentProjectId,\r\n        currentProjectName: currentProjectNameSelector(state.projects.projects, state.projects.currentProjectId),\r\n        projects: state.projects.projects,\r\n    }\r\n}\r\n\r\nexport default connect<MapStateToProps, MapDispatchToProps, {}, RootState>(mapStateToProps,\r\n    {addNewProject, setCurrentProjectId, addProjectInArrayOfUsers,})(AddProjectForm)\r\n","import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    board: {\r\n        height: \"80vh\",\r\n        overflow: \"auto\"\r\n    },\r\n}));\r\n\r\ntype BoardPropsType = {\r\n    title: string\r\n    tasks: Array<object>\r\n}\r\n\r\nconst Board: React.FC<BoardPropsType> = function(props: BoardPropsType) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const tasks = props.tasks.map(el => <Grid item xs={12} lg={6} >{el}</Grid>)\r\n\r\n    return (\r\n        <Paper elevation={5} className={classes.board}>\r\n            <Typography  align={'center'} variant=\"h6\">\r\n                {props.title}\r\n            </Typography>\r\n            <Container>\r\n                <Grid container spacing={1} >\r\n                    {tasks}\r\n                </Grid>\r\n            </Container>\r\n\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Board from \"./Board/Board\";\r\nimport CurrentTask from \"../Task/CurrentTask\";\r\nimport RunningTask from \"../Task/RunningTask\";\r\nimport ReviewTask from \"../Task/ReviewTask\";\r\nimport CompletedTask from \"../Task/CompletedTask\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {PropsWorkBoardType} from \"./WorkBoardContainer\";\r\nimport {takeTaskForRevision} from \"../../store/projects-reducer\";\r\nimport {unreadMessagesForTaskSelector} from \"../../utils/selectors/currentProject-selector\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    workBoard: {\r\n        margin: 1,\r\n    },\r\n}));\r\n\r\nconst WorkBoard: React.FC<PropsWorkBoardType> = function (props: PropsWorkBoardType) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const currentTasks = props.currentTasks.map(el => <CurrentTask\r\n        task={el}\r\n        currentUser={props.currentUser}\r\n        takeTaskForDevelopment={props.takeTaskForDevelopment}\r\n    />)\r\n\r\n    const runningTasks = props.runningTasks.map(el => <RunningTask\r\n        task={el}\r\n        currentUser={props.currentUser}\r\n        takeTaskForReview={props.takeTaskForReview}\r\n        giveTaskForReview={props.giveTaskForReview}\r\n        sendMessage={props.sendMessage}\r\n        unreadMessagesLength={unreadMessagesForTaskSelector(el, props.currentUser.id)}\r\n        readAllMessageInTask={props.readAllMessageInTask}\r\n    />)\r\n\r\n    const reviewTasks = props.reviewTasks.map(el => <ReviewTask\r\n        task={el}\r\n        currentUser={props.currentUser}\r\n        approveTask={props.approveTask}\r\n        sendMessage={props.sendMessage}\r\n        takeTaskForRevision={props.takeTaskForRevision}\r\n        unreadMessagesLength={unreadMessagesForTaskSelector(el, props.currentUser.id)}\r\n        readAllMessageInTask={props.readAllMessageInTask}\r\n    />)\r\n\r\n    const completedTasks = props.completedTasks.map(el => <CompletedTask\r\n        task={el}\r\n        currentUser={props.currentUser}\r\n        sendMessage={props.sendMessage}\r\n        unreadMessagesLength={unreadMessagesForTaskSelector(el, props.currentUser.id)}\r\n        readAllMessageInTask={props.readAllMessageInTask}\r\n    />)\r\n\r\n    return (\r\n        <div>\r\n            <Typography align={'center'} variant=\"h6\"\r\n                        color={'primary'}>\r\n                {props.currentProject?.name || 'select the current project in the projects section'}</Typography>\r\n            {props.currentProject &&\r\n            <Grid container spacing={2} justifyContent=\"center\" className={classes.workBoard}>\r\n                <Grid item xs={12} md={6}>\r\n                    <Board title={'Current tasks'} tasks={currentTasks}/>\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                    <Board title={'Running tasks'} tasks={runningTasks}/>\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                    <Board title={'Tasks under review'} tasks={reviewTasks}/>\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                    <Board title={'Completed tasks'} tasks={completedTasks}/>\r\n                </Grid>\r\n            </Grid>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WorkBoard;","import {projectType, taskType} from \"../../types/types\";\r\n\r\ntype statusType = 'newTask'|'development'|'testing'|'ready'\r\n\r\nexport function selectTasksByStatus(project: projectType | null, status:statusType) {\r\n    const selectedTask = project? project.tasks.filter(el => el.status === status): [];\r\n    return selectedTask\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport WorkBoard from \"./WorkBoard\";\r\nimport {currentProjectSelector} from \"../../utils/selectors/currentProject-selector\";\r\nimport {giveTaskForReview, takeTaskForDevelopment, takeTaskForReview, readAllMessageInTask, approveTask, sendMessage, takeTaskForRevision} from \"../../store/projects-reducer\";\r\nimport {selectTasksByStatus} from \"../../utils/selectors/task-selectors\";\r\nimport {RootState} from \"../../store/store\";\r\nimport {projectType, taskType, userType} from \"../../types/types\";\r\nimport RunningTask from \"../Task/RunningTask\";\r\n\r\n\r\ntype MapDispatchPropsType = {\r\n    takeTaskForDevelopment: (payload: { developer: userType, taskId: number }) => void\r\n    takeTaskForReview: (payload: { tester: userType, taskId: number }) => void\r\n    giveTaskForReview: (payload: {taskId: number}) => void\r\n    approveTask: (payload: {taskId: number}) => void\r\n    sendMessage: (payload: {taskId: number, author: userType, message: string}) => void\r\n    takeTaskForRevision: (payload: {taskId: number }) => void\r\n    readAllMessageInTask: (payload: {taskId: number, userId: number}) => void\r\n}\r\n\r\n\r\ntype MapStatePropsType = {\r\n    currentUser: userType\r\n    currentProject: projectType| null\r\n    currentTasks: Array<taskType>\r\n    runningTasks: Array<taskType>\r\n    reviewTasks: Array<taskType>\r\n    completedTasks: Array<taskType>\r\n}\r\nexport type PropsWorkBoardType = MapDispatchPropsType & MapStatePropsType\r\n\r\nlet mapStateToProps = (state:RootState): MapStatePropsType => {\r\n    return {\r\n        currentUser: state.users.currentUser,\r\n        currentProject: currentProjectSelector(state.projects.projects, state.projects.currentProjectId),\r\n        currentTasks: selectTasksByStatus(currentProjectSelector(state.projects.projects, state.projects.currentProjectId), 'newTask'),\r\n        runningTasks: selectTasksByStatus(currentProjectSelector(state.projects.projects, state.projects.currentProjectId), 'development'),\r\n        reviewTasks: selectTasksByStatus(currentProjectSelector(state.projects.projects, state.projects.currentProjectId), 'testing'),\r\n        completedTasks: selectTasksByStatus(currentProjectSelector(state.projects.projects, state.projects.currentProjectId), 'ready'),\r\n    }\r\n}\r\n//<TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, {}, RootState> (mapStateToProps,\r\n    {takeTaskForDevelopment, takeTaskForReview, giveTaskForReview, approveTask,\r\n        readAllMessageInTask, sendMessage, takeTaskForRevision})(WorkBoard)","// функция преобразует массив уровней доступа(чисел) в массив строк описывающих их\r\nexport const rowAccessLevels = (accesses: Array<number>) => {\r\n    let accessesString: Array<object> | any[] = [];\r\n    accesses.forEach(el => {\r\n        if (el === 1) {\r\n            accessesString.push({row: 'development', num: 1})\r\n        } else if(el === 2) {\r\n            accessesString.push({row: 'testing', num: 2})\r\n        } else if(el === 3) {\r\n            accessesString.push({row: 'adding tasks', num: 3})\r\n        } else if(el === 4) {\r\n            accessesString.push({row: 'adding projects', num: 4})\r\n        } else if(el === 5) {\r\n            accessesString.push({row: 'adding users', num: 5})\r\n        }\r\n    })\r\n    return accessesString\r\n}","import React, {useMemo, useState} from \"react\";\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport {userType} from \"../../../types/types\";\r\nimport {Avatar, Box, Checkbox, Chip, Container, Grid, Paper} from \"@material-ui/core\";\r\nimport {rowAccessLevels} from \"../../../utils/selectors/rowAccessLevels\";\r\n\r\ntype ListOfAccessesPropsType = {\r\n    selectedAccesses: Array<number> | any[]\r\n    setSelectedAccesses: (arg0: Array<number> | any[]) => void\r\n}\r\n\r\n// массим объектов {row: строка с названием, num: номер доступа}\r\nconst accesses = rowAccessLevels([1,2,3,4,5])\r\n\r\nconst ListOfAccesses: React.FC<ListOfAccessesPropsType> = function (props: ListOfAccessesPropsType) {\r\n\r\n    const listOfAccesses = accesses.map(el =>\r\n        <MenuItem\r\n            onClick={() => {\r\n                props.selectedAccesses.includes(el.num) ? props.setSelectedAccesses(\r\n                    [...props.selectedAccesses.filter(access => el.num !== access)])\r\n                    : props.setSelectedAccesses([...props.selectedAccesses, el.num])\r\n            }}>\r\n            <Checkbox\r\n                checked={props.selectedAccesses.includes(el.num)}\r\n                inputProps={{'aria-label': 'Checkbox A'}}\r\n            />\r\n            {el.row}\r\n        </MenuItem>)\r\n\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const handleClick = (event: any) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button fullWidth onClick={handleClick} endIcon={<MoreVertIcon/>} color={'primary'}\r\n                    size={\"large\"} variant={\"contained\"}>select accesses</Button>\r\n            <Menu\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n                {listOfAccesses}\r\n            </Menu>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ListOfAccesses;\r\n","import React from \"react\";\r\nimport {Chip, Paper, Typography} from '@material-ui/core';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {AddAccessesFormType} from \"./AddUserFormContainer\";\r\nimport {rowAccessLevels} from \"../../utils/selectors/rowAccessLevels\";\r\nimport ListOfAccesses from \"./ListOfAccesses/ListOfAccesses\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: 5,\r\n        minHeight: 32,\r\n    },\r\n\r\n}));\r\n\r\ntype selectionAccessesPropsType = {\r\n    selectedAccesses: Array<number> | any[]\r\n    setSelectedAccesses: (arg0: Array<number> | any[]) => void\r\n    isError: boolean\r\n    addUser: (payload: {name: string, surname: string, position: string, accesses: Array<number>}) => void\r\n}\r\n\r\nconst ChoiceOfAccessLevels: React.FC<selectionAccessesPropsType>\r\n    = function ({selectedAccesses,setSelectedAccesses, isError,...props}: selectionAccessesPropsType) {\r\n\r\n    const classes = useStyles();\r\n    console.log( rowAccessLevels(selectedAccesses))\r\n    console.log( selectedAccesses)\r\n\r\n    const selectedUsersView = rowAccessLevels(selectedAccesses).map(el =>\r\n        <Grid item >\r\n            <Chip\r\n                label={el.row}\r\n                color=\"primary\"\r\n                clickable\r\n                onDelete={() => setSelectedAccesses([...selectedAccesses.filter(access => access !== el.num)])}\r\n            /></Grid>)\r\n\r\n    return (\r\n        <Grid container spacing={1} direction={'row'} alignItems={\"flex-start\"}>\r\n            <Grid item xs={9} md={10}>\r\n                <Paper className={classes.paper}>\r\n                    {selectedAccesses.length === 0 ? <Typography variant={'subtitle1'}\r\n                                                              color={'textSecondary'}\r\n                                                              align={'left'}>select accesses for new user *</Typography>\r\n                        : <Grid container spacing={1} direction={'row'}>\r\n                            {selectedUsersView}\r\n                        </Grid>\r\n                    }\r\n                </Paper>\r\n            </Grid>\r\n            <Grid item xs={3} md={2}>\r\n                <ListOfAccesses\r\n                             setSelectedAccesses={setSelectedAccesses}\r\n                             selectedAccesses={selectedAccesses}/>\r\n            </Grid>\r\n            {isError && <Typography variant={'caption'}\r\n                        color={isError? 'error':'textSecondary'}\r\n                        align={'right'}>select accesses for new user</Typography>}\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default ChoiceOfAccessLevels;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {FilledInput, Input, Typography} from '@material-ui/core';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport {AddAccessesFormType} from \"./AddUserFormContainer\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {userType} from \"../../types/types\";\r\nimport ChoiceOfAccessLevels from \"./ChoiceOfAccessLevels\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        marginTop: 10,\r\n    },\r\n    button: {\r\n        marginLeft: \"auto\"\r\n    }\r\n}));\r\n\r\nconst AddUserForm: React.FC<AddAccessesFormType> = function (props: AddAccessesFormType) {\r\n\r\n    const classes = useStyles();\r\n\r\n    // массив уровней доступа нового пользователя\r\n    const [selectedAccesses, setSelectedAccesses] = useState<Array<number> | any[]>([])\r\n\r\n    // индикатор что массив уровней доступа не пустой\r\n    const [isError, setIsError] = useState(false)\r\n\r\n    // индикатор того отправлялись данные формы или нет хотя бы один раз\r\n    const [submited, setSubmited] = useState(false)\r\n\r\n    const {\r\n        register,\r\n        formState: {errors},\r\n        handleSubmit,\r\n        reset,\r\n    } = useForm({mode: 'onChange'});\r\n\r\n    // проверяем массив уровней доступа после каждого его изменения, испровляя в зависимости от этого isError\r\n    useEffect(() => {\r\n        selectedAccesses.length === 0 && submited\r\n            ? setIsError(true) : setIsError(false)\r\n    }, [selectedAccesses])\r\n\r\n    type formDataType = {\r\n        name: string\r\n        surname: string\r\n        position: string\r\n        accesses: Array<number>\r\n    }\r\n\r\n    const onSubmit = (formData: formDataType) => {\r\n        setSubmited(true)\r\n        if (selectedAccesses.length === 0) {\r\n            setIsError(true)\r\n        } else {\r\n            props.addUser({\r\n                name: formData.name,\r\n                surname: formData.surname,\r\n                position: formData.position,\r\n                accesses: selectedAccesses\r\n            })\r\n            reset()\r\n            setSelectedAccesses([])\r\n            setSubmited(false)\r\n            setIsError(false)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant={'h6'} color={'primary'}>{'Сreating new user'}</Typography>\r\n            {props.currentUser.accesses.includes(5) ?\r\n                <form noValidate autoComplete=\"off\" onSubmit={handleSubmit(onSubmit)}>\r\n                    <Container className={classes.container}>\r\n                        <Grid spacing={2} container>\r\n                            <Grid item xs={12} md={6}><TextField variant={\"outlined\"} fullWidth required\r\n                                                                 error={errors.name ? true : false}\r\n                                                                 helperText={errors.name ? 'enter user name' : null}\r\n                                                                 {...register('name', {required: true})} name={'name'}\r\n                                                                 label=\"name\"/>\r\n                                <br/></Grid>\r\n                            <Grid item xs={12} md={6}><TextField variant={\"outlined\"} fullWidth\r\n                                                                 required {...register('surname', {required: true})}\r\n                                                                 error={errors.surname ? true : false}\r\n                                                                 helperText={errors.surname ? 'enter user surname' : null}\r\n                                                                 name={'surname'} label=\"surname\"/>\r\n                                <br/></Grid>\r\n                            <Grid item xs={12}><TextField variant={\"outlined\"} fullWidth\r\n                                                          required {...register('position', {required: true})}\r\n                                                          error={errors.position ? true : false}\r\n                                                          helperText={errors.position ? 'enter user position' : null}\r\n                                                          name={'position'} label=\"position\"/>\r\n                                <br/></Grid>\r\n                            <Grid item xs={12} md={12}>\r\n                                <ChoiceOfAccessLevels selectedAccesses={selectedAccesses}\r\n                                                      setSelectedAccesses={setSelectedAccesses}\r\n                                                      isError={isError} addUser={props.addUser}/>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Button className={classes.container} color={'primary'} size={\"large\"} type={'submit'}\r\n                                variant={\"contained\"}>\r\n                            create new user\r\n                        </Button>\r\n                    </Container>\r\n                </form> : <Redirect to={'/projects'}/>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddUserForm;\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {addUser} from '../../store/users-reducer';\r\nimport {RootState} from \"../../store/store\";\r\nimport {userType} from \"../../types/types\";\r\nimport AddUserForm from \"./AddUserForm\";\r\n\r\ntype MapStateToProps = {\r\n    users: Array<userType>\r\n    currentUser: userType\r\n}\r\ntype MapDispatchToProps = {\r\n    addUser: (payload: {name: string, surname: string, position: string, accesses: Array<number>}) => void\r\n}\r\nexport type AddAccessesFormType = MapStateToProps & MapDispatchToProps;\r\n\r\nlet mapStateToProps = (state: RootState) => {\r\n    return {\r\n        users: state.users.users,\r\n        currentUser: state.users.currentUser,\r\n    }\r\n}\r\n\r\nexport default connect<MapStateToProps, MapDispatchToProps, {}, RootState>(mapStateToProps,\r\n    {addUser})(AddUserForm)\r\n","import React, {useState} from \"react\";\nimport './App.css';\nimport Header from \"./views/Header/HeaderContainer\";\nimport {Switch, Route} from 'react-router-dom'\nimport Container from \"@material-ui/core/Container\";\nimport ListOfProjectsContainer from \"./views/ListOfProjects/ListOfProjectsContainer\";\nimport ListOfTasksContainer from \"./views/ListOfTasks/ListOfTasksContainer\";\nimport AddTaskFormContainer from \"./views/AddTaskForm/AddTaskFormContainer\";\nimport AddProjectFormContainer from \"./views/AddProjectForm/AddProjectFormContainer\";\nimport WorkBoardContainer from \"./views/WorkBoard/WorkBoardContainer\";\nimport {createTheme} from '@material-ui/core/styles';\nimport {ThemeProvider} from \"@material-ui/core\";\nimport AddUserFormContainer from \"./views/AddUserForm/AddUserFormContainer\";\n\nfunction App() {\n\n    const [color, setColor] = useState({})\n\n    const theme = createTheme(\n        color\n    );\n\n    return (\n        <div className='App'>\n            <ThemeProvider theme={theme}>\n                <Header setColor={setColor}/>\n                <Switch>\n                    <Container>\n                        <Route path='/currentProject' render={() => <WorkBoardContainer/>}/>\n                        <Route path='/currentTasks' render={() => <ListOfTasksContainer/>}/>\n                        <Route path='/projects' render={() => <ListOfProjectsContainer/>}/>\n                        <Route path='/addTaskForm' render={() => <AddTaskFormContainer/>}/>\n                        <Route path='/addProjectForm' render={() => <AddProjectFormContainer/>}/>\n                        <Route path='/addUserForm' render={() => <AddUserFormContainer/>}/>\n                    </Container>\n                </Switch>\n            </ThemeProvider>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport userReducer from './users-reducer'\r\nimport projectReducer from './projects-reducer'\r\nimport settingsReducer from './settings-reducer'\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        users: userReducer,\r\n        projects: projectReducer,\r\n        settings: settingsReducer,\r\n    },\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\nimport {store} from \"./store/store\";\nimport {Provider} from \"react-redux\";\n\n\nReactDOM.render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}